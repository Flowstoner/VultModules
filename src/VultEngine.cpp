
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "VultEngine.h"

float Util_sampleRateScale(){
   return (44100.f / getSampleRate());
}

void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_3 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_1;
   _cond_1 = (x <= -0.666666666667f);
   if(_cond_1){
      return -1.f;
   }
   else
   {
      uint8_t _cond_0;
      _cond_0 = (x >= 0.666666666667f);
      if(_cond_0){
         return 1.f;
      }
      else
      {
         return (1.76086956522f * (x + (-0.333333333333f * x * x * x)));
      }
   }
}

float Util_stanh(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_stanh_c0)[index] + (x * (float_wrap_array(Util_stanh_c1)[index] + (float_wrap_array(Util_stanh_c2)[index] * x))));
}

float Util_sine(float x){
   int index;
   index = int_clip(float_to_int((100.f * x)),0,100);
   return (float_wrap_array(Util_sine_c0)[index] + (x * (float_wrap_array(Util_sine_c1)[index] + (float_wrap_array(Util_sine_c2)[index] * x))));
}

float Util_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_saturate_c0)[index] + (x * (float_wrap_array(Util_saturate_c1)[index] + (float_wrap_array(Util_saturate_c2)[index] * x))));
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_9_init(Util__ctx_type_9 &_output_){
   Util__ctx_type_9 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_9 &_output_){
   Util__ctx_type_9_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_9 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_10_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_10 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToperiodUnit(float cv){
   int index;
   index = int_clip(float_to_int((63.5f * (cv + 1.f))),0,127);
   return (float_wrap_array(Util_cvToperiodUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToperiodUnit_c1)[index] + (float_wrap_array(Util_cvToperiodUnit_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

float Util_pitchToRateUnit(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRateUnit_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRateUnit_c1)[index] + (float_wrap_array(Util_pitchToRateUnit_c2)[index] * pitch))));
}

float Util_cvToRateUnit(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRateUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToRateUnit_c1)[index] + (float_wrap_array(Util_cvToRateUnit_c2)[index] * cv))));
}

void Util__ctx_type_16_init(Util__ctx_type_16 &_output_){
   Util__ctx_type_16 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_3_init(_ctx._inst1);
   Util__ctx_type_3_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Util_pitchToRate_init(Util__ctx_type_16 &_output_){
   Util__ctx_type_16_init(_output_);
   return ;
}

float Util_pitchToRate(Util__ctx_type_16 &_ctx, float pitch){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_0;
   _cond_0 = (Util_change(_ctx._inst0,pitch) || Util_change(_ctx._inst1,fs));
   if(_cond_0){
      _ctx.rate = (Util_pitchToRateUnit(pitch) / getSampleRate());
   }
   return _ctx.rate;
}

void Util__ctx_type_17_init(Util__ctx_type_17 &_output_){
   Util__ctx_type_17 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_3_init(_ctx._inst1);
   Util__ctx_type_3_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Util_cvToRate_init(Util__ctx_type_17 &_output_){
   Util__ctx_type_17_init(_output_);
   return ;
}

float Util_cvToRate(Util__ctx_type_17 &_ctx, float cv){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_0;
   _cond_0 = (Util_change(_ctx._inst0,cv) || Util_change(_ctx._inst1,fs));
   if(_cond_0){
      _ctx.rate = (Util_cvToRateUnit(cv) / fs);
   }
   return _ctx.rate;
}

float Util_cvToHarmonics(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToHarmonics_c0)[index] + (cv * (float_wrap_array(Util_cvToHarmonics_c1)[index] + (float_wrap_array(Util_cvToHarmonics_c2)[index] * cv))));
}

void Util__ctx_type_19_init(Util__ctx_type_19 &_output_){
   Util__ctx_type_19 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Util_simple_noise_init(Util__ctx_type_19 &_output_){
   Util__ctx_type_19_init(_output_);
   return ;
}

float Util_simple_noise(Util__ctx_type_19 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

float Util_polylog(float x){
   float xx;
   xx = float_clip(x,0.f,1.f);
   return ((2.f + (- xx)) * xx);
}

float Util_shaper(float x){
   float pos;
   float sign;
   uint8_t _cond_0;
   _cond_0 = (x >= 0.f);
   if(_cond_0){
      pos = x;
      sign = 1.f;
   }
   else
   {
      pos = (- x);
      sign = -1.f;
   }
   float y;
   uint8_t _cond_1;
   _cond_1 = (pos < 1.f);
   if(_cond_1){ y = ((2.f + (- pos)) * pos); }
   else
   { y = 1.f; }
   return (y * sign);
}

float Util_fadeA(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeA_c0)[index] + (x * (float_wrap_array(Util_fadeA_c1)[index] + (float_wrap_array(Util_fadeA_c2)[index] * x))));
}

float Util_fadeB(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeB_c0)[index] + (x * (float_wrap_array(Util_fadeB_c1)[index] + (float_wrap_array(Util_fadeB_c2)[index] * x))));
}

void Util_fade(float x, _tuple___real_real__ &_output_){
   _tuple___real_real__ _tuple_0;
   {
      _tuple_0.field_0 = Util_fadeA(x);
      _tuple_0.field_1 = Util_fadeB(x);
   }
   _output_ = _tuple_0;
   return ;
}

void Util__ctx_type_25_init(Util__ctx_type_25 &_output_){
   Util__ctx_type_25 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder2_4x_init(Util__ctx_type_25 &_output_){
   Util__ctx_type_25_init(_output_);
   return ;
}

void Util_upsampleOrder2_4x(Util__ctx_type_25 &_ctx, float y0, _tuple___real_real_real__ &_output_){
   float p2;
   p2 = ((0.15625f * y0) + (0.9375f * _ctx.y1) + (-0.09375f * _ctx.y2));
   float p1;
   p1 = ((0.375f * y0) + (0.75f * _ctx.y1) + (-0.125f * _ctx.y2));
   float p0;
   p0 = ((0.65625f * y0) + (0.4375f * _ctx.y1) + (-0.09375f * _ctx.y2));
   float _tmp_0_0;
   _tmp_0_0 = _ctx.y1;
   float _tmp_0_1;
   _tmp_0_1 = y0;
   _ctx.y2 = _tmp_0_0;
   _ctx.y1 = _tmp_0_1;
   _tuple___real_real_real__ _tuple_1;
   {
      _tuple_1.field_0 = p2;
      _tuple_1.field_1 = p1;
      _tuple_1.field_2 = p0;
   }
   _output_ = _tuple_1;
   return ;
}

void Util__ctx_type_26_init(Util__ctx_type_26 &_output_){
   Util__ctx_type_26 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder2_2x_init(Util__ctx_type_26 &_output_){
   Util__ctx_type_26_init(_output_);
   return ;
}

float Util_upsampleOrder2_2x(Util__ctx_type_26 &_ctx, float y0){
   float p0;
   p0 = ((0.375f * y0) + (0.75f * _ctx.y1) + (-0.125f * _ctx.y2));
   float _tmp_0_0;
   _tmp_0_0 = _ctx.y1;
   float _tmp_0_1;
   _tmp_0_1 = y0;
   _ctx.y2 = _tmp_0_0;
   _ctx.y1 = _tmp_0_1;
   return p0;
}

void Util__ctx_type_27_init(Util__ctx_type_27 &_output_){
   Util__ctx_type_27 _ctx;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder1_4x_init(Util__ctx_type_27 &_output_){
   Util__ctx_type_27_init(_output_);
   return ;
}

void Util_upsampleOrder1_4x(Util__ctx_type_27 &_ctx, float y0, _tuple___real_real_real__ &_output_){
   float p2;
   p2 = ((y0 + (3.f * _ctx.y1)) * 0.25f);
   float p1;
   p1 = ((y0 + _ctx.y1) * 0.5f);
   float p0;
   p0 = (((3.f * y0) + _ctx.y1) * 0.25f);
   _ctx.y1 = y0;
   _tuple___real_real_real__ _tuple_0;
   {
      _tuple_0.field_0 = p2;
      _tuple_0.field_1 = p1;
      _tuple_0.field_2 = p0;
   }
   _output_ = _tuple_0;
   return ;
}

void Util__ctx_type_28_init(Util__ctx_type_28 &_output_){
   Util__ctx_type_28 _ctx;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder1_2x_init(Util__ctx_type_28 &_output_){
   Util__ctx_type_28_init(_output_);
   return ;
}

float Util_upsampleOrder1_2x(Util__ctx_type_28 &_ctx, float y0){
   float p0;
   p0 = ((y0 + _ctx.y1) * 0.5f);
   _ctx.y1 = y0;
   return p0;
}

float Util_cheby3(float x){
   return ((4.f * x * x * x) + (-3.f * x));
}

void Util__ctx_type_30_init(Util__ctx_type_30 &_output_){
   Util__ctx_type_30 _ctx;
   float_init_array(32,0.f,_ctx.z);
   _ctx.index = 0;
   _output_ = _ctx;
   return ;
}

void Util_decimate_4x_do_init(Util__ctx_type_30 &_output_){
   Util__ctx_type_30_init(_output_);
   return ;
}

float Util_decimate_4x_do(Util__ctx_type_30 &_ctx, float x){
   float coeff[32];
   {
      coeff[0] = -0.0141811689213f;
      coeff[1] = -0.0197443826146f;
      coeff[2] = -0.0234695564557f;
      coeff[3] = -0.024608797997f;
      coeff[4] = -0.0225882614699f;
      coeff[5] = -0.0170771755778f;
      coeff[6] = -0.00803640953463f;
      coeff[7] = 0.00425913785228f;
      coeff[8] = 0.0192275357882f;
      coeff[9] = 0.0360165149192f;
      coeff[10] = 0.0535671679991f;
      coeff[11] = 0.0706991874936f;
      coeff[12] = 0.0862098987626f;
      coeff[13] = 0.0989778313456f;
      coeff[14] = 0.108060976859f;
      coeff[15] = 0.112780281507f;
      coeff[16] = 0.112780281507f;
      coeff[17] = 0.108060976859f;
      coeff[18] = 0.0989778313456f;
      coeff[19] = 0.0862098987626f;
      coeff[20] = 0.0706991874936f;
      coeff[21] = 0.0535671679991f;
      coeff[22] = 0.0360165149192f;
      coeff[23] = 0.0192275357882f;
      coeff[24] = 0.00425913785228f;
      coeff[25] = -0.00803640953463f;
      coeff[26] = -0.0170771755778f;
      coeff[27] = -0.0225882614699f;
      coeff[28] = -0.024608797997f;
      coeff[29] = -0.0234695564557f;
      coeff[30] = -0.0197443826146f;
      coeff[31] = -0.0141811689213f;
   }
   _ctx.z[_ctx.index] = x;
   int count;
   int i;
   float out;
   count = 0;
   i = _ctx.index;
   out = 0.f;
   while(count < 32){
      out = (out + (_ctx.z[i] * coeff[count]));
      count = (count + 1);
      uint8_t _cond_0;
      _cond_0 = (i == 0);
      if(_cond_0){ i = 31; }
      else
      { i = (i + (-1)); }
   }
   _ctx.index = ((_ctx.index + 1) % 32);
   return out;
}

void Util_decimate_4x_skip_init(Util__ctx_type_30 &_output_){
   Util__ctx_type_30_init(_output_);
   return ;
}

void Util_decimate_4x_skip(Util__ctx_type_30 &_ctx, float x){
   _ctx.z[_ctx.index] = x;
   _ctx.index = ((_ctx.index + 1) % 32);
}

void Util__ctx_type_31_init(Util__ctx_type_31 &_output_){
   Util__ctx_type_31 _ctx;
   float_init_array(32,0.f,_ctx.z);
   _ctx.index = 0;
   _output_ = _ctx;
   return ;
}

void Util_decimate_2x_do_init(Util__ctx_type_31 &_output_){
   Util__ctx_type_31_init(_output_);
   return ;
}

float Util_decimate_2x_do(Util__ctx_type_31 &_ctx, float x){
   float coeff[32];
   {
      coeff[0] = -0.0205141096584f;
      coeff[1] = -0.0172601498343f;
      coeff[2] = -0.00450723565518f;
      coeff[3] = 0.0126537637879f;
      coeff[4] = 0.0261095379162f;
      coeff[5] = 0.0282196492364f;
      coeff[6] = 0.015603662007f;
      coeff[7] = -0.0084630025825f;
      coeff[8] = -0.0342823554271f;
      coeff[9] = -0.0488065105196f;
      coeff[10] = -0.0405574383468f;
      coeff[11] = -0.00453204098441f;
      coeff[12] = 0.0549134037508f;
      coeff[13] = 0.124522730781f;
      coeff[14] = 0.186001732548f;
      coeff[15] = 0.221992869407f;
      coeff[16] = 0.221992869407f;
      coeff[17] = 0.186001732548f;
      coeff[18] = 0.124522730781f;
      coeff[19] = 0.0549134037508f;
      coeff[20] = -0.00453204098441f;
      coeff[21] = -0.0405574383468f;
      coeff[22] = -0.0488065105196f;
      coeff[23] = -0.0342823554271f;
      coeff[24] = -0.0084630025825f;
      coeff[25] = 0.015603662007f;
      coeff[26] = 0.0282196492364f;
      coeff[27] = 0.0261095379162f;
      coeff[28] = 0.0126537637879f;
      coeff[29] = -0.00450723565518f;
      coeff[30] = -0.0172601498343f;
      coeff[31] = -0.0205141096584f;
   }
   _ctx.z[_ctx.index] = x;
   int count;
   int i;
   float out;
   count = 0;
   i = _ctx.index;
   out = 0.f;
   while(count < 32){
      out = (out + (_ctx.z[i] * coeff[count]));
      count = (count + 1);
      uint8_t _cond_0;
      _cond_0 = (i == 0);
      if(_cond_0){ i = 31; }
      else
      { i = (i + (-1)); }
   }
   _ctx.index = ((_ctx.index + 1) % 32);
   return out;
}

void Util_decimate_2x_skip_init(Util__ctx_type_31 &_output_){
   Util__ctx_type_31_init(_output_);
   return ;
}

void Util_decimate_2x_skip(Util__ctx_type_31 &_ctx, float x){
   _ctx.z[_ctx.index] = x;
   _ctx.index = ((_ctx.index + 1) % 32);
}

float Stabile_calc_g(float cv, float fs){
   float pitch;
   pitch = Util_cvToPitch(cv);
   float f;
   f = (8.17579891564f * expf((0.0577622650467f * pitch)));
   float wd;
   wd = (6.28318530718f * f);
   float T;
   T = (1.f / fs);
   float wa;
   wa = ((2.f / T) * tanf((wd * T * 0.5f)));
   float g;
   g = (wa * T * 0.5f);
   return g;
}

float Stabile_calc_g_44100(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_44100_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_44100_c1)[index] + (float_wrap_array(Stabile_calc_g_44100_c2)[index] * cv))));
}

float Stabile_calc_g_48000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_48000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_48000_c1)[index] + (float_wrap_array(Stabile_calc_g_48000_c2)[index] * cv))));
}

float Stabile_calc_g_88200(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_88200_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_88200_c1)[index] + (float_wrap_array(Stabile_calc_g_88200_c2)[index] * cv))));
}

float Stabile_calc_g_96000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_96000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_96000_c1)[index] + (float_wrap_array(Stabile_calc_g_96000_c2)[index] * cv))));
}

float Stabile_calc_g_176400(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_176400_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_176400_c1)[index] + (float_wrap_array(Stabile_calc_g_176400_c2)[index] * cv))));
}

float Stabile_calc_g_192000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_192000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_192000_c1)[index] + (float_wrap_array(Stabile_calc_g_192000_c2)[index] * cv))));
}

float Stabile_tune(float cv){
   float fs;
   fs = getSampleRate();
   float g;
   g = 0.f;
   uint8_t _cond_5;
   _cond_5 = (fs == 44100.f);
   if(_cond_5){
      g = Stabile_calc_g_44100(cv);
   }
   else
   {
      uint8_t _cond_4;
      _cond_4 = (fs == 48000.f);
      if(_cond_4){
         g = Stabile_calc_g_48000(cv);
      }
      else
      {
         uint8_t _cond_3;
         _cond_3 = (fs == 88200.f);
         if(_cond_3){
            g = Stabile_calc_g_88200(cv);
         }
         else
         {
            uint8_t _cond_2;
            _cond_2 = (fs == 96000.f);
            if(_cond_2){
               g = Stabile_calc_g_96000(cv);
            }
            else
            {
               uint8_t _cond_1;
               _cond_1 = (fs == 176400.f);
               if(_cond_1){
                  g = Stabile_calc_g_176400(cv);
               }
               else
               {
                  uint8_t _cond_0;
                  _cond_0 = (fs == 192000.f);
                  if(_cond_0){
                     g = Stabile_calc_g_192000(cv);
                  }
                  else
                  {
                     g = Stabile_calc_g(cv,getSampleRate());
                  }
               }
            }
         }
      }
   }
   return g;
}

void Stabile__ctx_type_8_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8 _ctx;
   _ctx.z2 = 0.f;
   _ctx.z1 = 0.f;
   _ctx.inv_den = 0.f;
   _ctx.g = 0.f;
   Util__ctx_type_3_init(_ctx._inst1);
   Util__ctx_type_3_init(_ctx._inst0);
   _ctx.R = 0.f;
   Stabile_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Stabile_process_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8_init(_output_);
   return ;
}

void Stabile_process(Stabile__ctx_type_8 &_ctx, float x, float cv, float q, float semblance, _tuple___real_real_real_real__ &_output_){
   q = (q + 0.5f);
   uint8_t _cond_0;
   _cond_0 = (Util_change(_ctx._inst0,cv) || Util_change(_ctx._inst1,q));
   if(_cond_0){
      _ctx.g = Stabile_tune(cv);
      _ctx.R = (1.f / (2.f * (q + 1e-18f)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = ((x + (- (((2.f * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   float band;
   band = ((_ctx.g * high) + _ctx.z1);
   float low;
   low = ((_ctx.g * band) + _ctx.z2);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   float sem;
   sem = ((Util_fadeA(semblance) * low) + (Util_fadeB(semblance) * high));
   _tuple___real_real_real_real__ _tuple_0;
   {
      _tuple_0.field_0 = low;
      _tuple_0.field_1 = band;
      _tuple_0.field_2 = high;
      _tuple_0.field_3 = sem;
   }
   _output_ = _tuple_0;
   return ;
}

void Stabile_default_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8_init(_output_);
   return ;
}

void Stabile_default(Stabile__ctx_type_8 &_ctx){
   _ctx.g = Stabile_calc_g(0.f,getSampleRate());
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

float Waves_sine_wave(float x){
   int index;
   index = int_clip(float_to_int((511.f * x)),0,511);
   return (float_wrap_array(Waves_sine_wave_c0)[index] + (x * (float_wrap_array(Waves_sine_wave_c1)[index] + (float_wrap_array(Waves_sine_wave_c2)[index] * x))));
}

float Waves_tri_wave(float x){
   int index;
   index = int_clip(float_to_int((511.f * x)),0,511);
   return (float_wrap_array(Waves_tri_wave_c0)[index] + (x * (float_wrap_array(Waves_tri_wave_c1)[index] + (float_wrap_array(Waves_tri_wave_c2)[index] * x))));
}

float Waves_saw_wave_raw(float x, int n){
   int i;
   i = 1;
   float acc;
   acc = 0.f;
   while(i < n){
      acc = (acc + (sinf((6.28318530718f * x * int_to_float(i))) / int_to_float(i)));
      i = (i + 1);
   }
   return acc;
}

float Waves_saw_wave_8(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_saw_wave_8_c0)[index] + (x * (float_wrap_array(Waves_saw_wave_8_c1)[index] + (float_wrap_array(Waves_saw_wave_8_c2)[index] * x))));
}

float Waves_saw_wave_16(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_saw_wave_16_c0)[index] + (x * (float_wrap_array(Waves_saw_wave_16_c1)[index] + (float_wrap_array(Waves_saw_wave_16_c2)[index] * x))));
}

float Waves_saw_wave_32(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_saw_wave_32_c0)[index] + (x * (float_wrap_array(Waves_saw_wave_32_c1)[index] + (float_wrap_array(Waves_saw_wave_32_c2)[index] * x))));
}

float Waves_saw_wave_64(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_saw_wave_64_c0)[index] + (x * (float_wrap_array(Waves_saw_wave_64_c1)[index] + (float_wrap_array(Waves_saw_wave_64_c2)[index] * x))));
}

float Waves_saw_wave_128(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_saw_wave_128_c0)[index] + (x * (float_wrap_array(Waves_saw_wave_128_c1)[index] + (float_wrap_array(Waves_saw_wave_128_c2)[index] * x))));
}

float Waves_saw_wave_256(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_saw_wave_256_c0)[index] + (x * (float_wrap_array(Waves_saw_wave_256_c1)[index] + (float_wrap_array(Waves_saw_wave_256_c2)[index] * x))));
}

float Waves_saw_wave(float cv, float phase){
   int n;
   n = float_to_int(Util_cvToHarmonics(cv));
   uint8_t _cond_0;
   _cond_0 = (n >= 256);
   if(_cond_0){
      return Waves_saw_wave_256(phase);
   }
   uint8_t _cond_1;
   _cond_1 = (n >= 128);
   if(_cond_1){
      return Waves_saw_wave_128(phase);
   }
   uint8_t _cond_2;
   _cond_2 = (n >= 64);
   if(_cond_2){
      return Waves_saw_wave_64(phase);
   }
   uint8_t _cond_3;
   _cond_3 = (n >= 32);
   if(_cond_3){
      return Waves_saw_wave_32(phase);
   }
   uint8_t _cond_4;
   _cond_4 = (n >= 16);
   if(_cond_4){
      return Waves_saw_wave_16(phase);
   }
   uint8_t _cond_5;
   _cond_5 = (n >= 8);
   if(_cond_5){
      return Waves_saw_wave_8(phase);
   }
   return Waves_sine_wave(phase);
}

float Waves_pulse_wave_raw(float x, int n){
   int i;
   i = 1;
   float acc;
   acc = 0.f;
   while(i < n){
      uint8_t _cond_0;
      _cond_0 = ((i % 2) != 0);
      if(_cond_0){
         acc = (acc + (sinf((6.28318530718f * x * int_to_float(i))) / int_to_float(i)));
      }
      i = (i + 1);
   }
   return acc;
}

float Waves_pulse_wave_8(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_pulse_wave_8_c0)[index] + (x * (float_wrap_array(Waves_pulse_wave_8_c1)[index] + (float_wrap_array(Waves_pulse_wave_8_c2)[index] * x))));
}

float Waves_pulse_wave_16(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_pulse_wave_16_c0)[index] + (x * (float_wrap_array(Waves_pulse_wave_16_c1)[index] + (float_wrap_array(Waves_pulse_wave_16_c2)[index] * x))));
}

float Waves_pulse_wave_32(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_pulse_wave_32_c0)[index] + (x * (float_wrap_array(Waves_pulse_wave_32_c1)[index] + (float_wrap_array(Waves_pulse_wave_32_c2)[index] * x))));
}

float Waves_pulse_wave_64(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_pulse_wave_64_c0)[index] + (x * (float_wrap_array(Waves_pulse_wave_64_c1)[index] + (float_wrap_array(Waves_pulse_wave_64_c2)[index] * x))));
}

float Waves_pulse_wave_128(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_pulse_wave_128_c0)[index] + (x * (float_wrap_array(Waves_pulse_wave_128_c1)[index] + (float_wrap_array(Waves_pulse_wave_128_c2)[index] * x))));
}

float Waves_pulse_wave_256(float x){
   int index;
   index = int_clip(float_to_int((464.545454545f * x)),0,511);
   return (float_wrap_array(Waves_pulse_wave_256_c0)[index] + (x * (float_wrap_array(Waves_pulse_wave_256_c1)[index] + (float_wrap_array(Waves_pulse_wave_256_c2)[index] * x))));
}

float Waves_pulse_wave(float cv, float phase){
   int n;
   n = float_to_int(Util_cvToHarmonics(cv));
   uint8_t _cond_0;
   _cond_0 = (n >= 256);
   if(_cond_0){
      return Waves_pulse_wave_256(phase);
   }
   uint8_t _cond_1;
   _cond_1 = (n >= 128);
   if(_cond_1){
      return Waves_pulse_wave_128(phase);
   }
   uint8_t _cond_2;
   _cond_2 = (n >= 64);
   if(_cond_2){
      return Waves_pulse_wave_64(phase);
   }
   uint8_t _cond_3;
   _cond_3 = (n >= 32);
   if(_cond_3){
      return Waves_pulse_wave_32(phase);
   }
   uint8_t _cond_4;
   _cond_4 = (n >= 16);
   if(_cond_4){
      return Waves_pulse_wave_16(phase);
   }
   uint8_t _cond_5;
   _cond_5 = (n >= 8);
   if(_cond_5){
      return Waves_pulse_wave_8(phase);
   }
   return Waves_sine_wave(phase);
}

float Waves_scale(float n){
   int index;
   index = int_clip(float_to_int((5.11511511512f * (n + -0.1f))),0,511);
   return (float_wrap_array(Waves_scale_c0)[index] + (n * (float_wrap_array(Waves_scale_c1)[index] + (float_wrap_array(Waves_scale_c2)[index] * n))));
}

float Waves_wave(float cv, float phase, float aura){
   uint8_t _cond_1;
   _cond_1 = (aura == 0.f);
   if(_cond_1){
      return Waves_sine_wave(phase);
   }
   else
   {
      uint8_t _cond_0;
      _cond_0 = (aura > 0.f);
      if(_cond_0){
         return ((Util_fadeA(aura) * Waves_sine_wave(phase)) + (Util_fadeB(aura) * Waves_pulse_wave(cv,phase)));
      }
      else
      {
         float a;
         a = fabsf(aura);
         return ((Util_fadeA(a) * Waves_sine_wave(phase)) + (Util_fadeB(a) * Waves_tri_wave(phase)));
      }
   }
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst2);
   Util__ctx_type_2_init(_ctx._inst1);
   Util__ctx_type_17_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable, float w, _tuple___real_bool__ &_output_){
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   uint8_t _cond_1;
   _cond_1 = bool_not(_ctx.reset_state);
   if(_cond_1){
      _ctx.phase = (_ctx.phase + Util_cvToRate(_ctx._inst0,cv));
      uint8_t _cond_0;
      _cond_0 = (_ctx.phase > 1.f);
      if(_cond_0){
         _ctx.phase = (_ctx.phase + -1.f);
      }
   }
   float a;
   float b;
   _tuple___real_real__ _call_0;
   Util_fade(w,_call_0);
   a = _call_0.field_0;b = _call_0.field_1;
   float sine_out;
   sine_out = ((a * Waves_sine_wave(_ctx.phase)) + (b * Waves_tri_wave(_ctx.phase)));
   uint8_t _cond_2;
   _cond_2 = (Util_edge(_ctx._inst1,(reset > 0.f)) || Util_edge(_ctx._inst2,bdisable));
   if(_cond_2){
      _ctx.reset_phase = 1.f;
      _ctx.reset_state = 1;
   }
   float reset_out;
   reset_out = 1.f;
   if(_ctx.reset_state){
      uint8_t _cond_4;
      _cond_4 = (fabsf(_ctx.reset_phase) > 0.001f);
      if(_cond_4){
         float reset_speed;
         reset_speed = 0.01f;
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_3;
         _cond_3 = (_ctx.reset_phase > 0.001f);
         if(bool_not(_cond_3)){ _ctx.reset_phase = 0.f; }
         _ctx.reset_state = 0;
         _ctx.phase = 0.f;
      }
      reset_out = _ctx.reset_phase;
   }
   _tuple___real_bool__ _tuple_1;
   {
      _tuple_1.field_0 = (reset_out * sine_out);
      _tuple_1.field_1 = _ctx.reset_state;
   }
   _output_ = _tuple_1;
   return ;
}

float Tohe_tone_k1(float g){
   int index;
   index = int_clip(float_to_int((15.5f * (g + 1.f))),0,31);
   return (float_wrap_array(Tohe_tone_k1_c0)[index] + (g * (float_wrap_array(Tohe_tone_k1_c1)[index] + (float_wrap_array(Tohe_tone_k1_c2)[index] * g))));
}

float Tohe_tone_k0(float g){
   int index;
   index = int_clip(float_to_int((15.5f * (g + 1.f))),0,31);
   return (float_wrap_array(Tohe_tone_k0_c0)[index] + (g * (float_wrap_array(Tohe_tone_k0_c1)[index] + (float_wrap_array(Tohe_tone_k0_c2)[index] * g))));
}

void Tohe__ctx_type_2_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2 _ctx;
   _ctx.w1 = 0.f;
   _ctx.k1 = 0.f;
   _ctx.k0 = 0.f;
   _ctx.comp = 0.f;
   Util__ctx_type_3_init(_ctx._inst0);
   Tohe_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Tohe_do_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2_init(_output_);
   return ;
}

float Tohe_do(Tohe__ctx_type_2 &_ctx, float x, float gain){
   uint8_t _cond_0;
   _cond_0 = Util_change(_ctx._inst0,gain);
   if(_cond_0){
      _ctx.k1 = Tohe_tone_k1(gain);
      _ctx.k0 = Tohe_tone_k0(gain);
      _ctx.comp = Util_map(fabsf(gain),0.f,1.f,1.f,1.8f);
   }
   float w0;
   w0 = (x + (- (_ctx.k0 * _ctx.w1)));
   float y0;
   y0 = ((_ctx.k0 * w0) + _ctx.w1);
   _ctx.w1 = w0;
   float sign;
   uint8_t _cond_1;
   _cond_1 = (gain < 0.f);
   if(_cond_1){ sign = -1.f; }
   else
   { sign = 1.f; }
   return (((_ctx.k1 * (x + (sign * y0)) * 0.5f) + x) * _ctx.comp);
}

void Tohe_start_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2_init(_output_);
   return ;
}

void Tohe_start(Tohe__ctx_type_2 &_ctx){
   _ctx.k1 = 0.f;
   _ctx.k0 = -0.852723285867f;
   _ctx.comp = 1.f;
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   Util__ctx_type_2_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   uint8_t bgate;
   bgate = (gate > 0.5f);
   float g;
   g = (1.f + (- Util_polylog((0.5f + (rate * 0.5f)))));
   _ctx.out = (_ctx.out + ((end + (- _ctx.out)) * g * 0.004f * Util_sampleRateScale()));
   uint8_t _cond_0;
   _cond_0 = Util_edge(_ctx._inst0,bgate);
   if(_cond_0){
      _ctx.out = start;
   }
   return _ctx.out;
}

void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_default(Swept__ctx_type_0 &_ctx){
}

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Noise_syncronized_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_syncronized(Noise__ctx_type_0 &_ctx, uint8_t gate){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   float y2;
   y2 = (int_to_float(_ctx.x2) * 3.0517578125e-05f);
   float out;
   out = (y1 + (- y2));
   if(gate){
      _ctx.x1 = 0;
      _ctx.x2 = 0;
   }
   return out;
}

void Decimate__ctx_type_0_init(Decimate__ctx_type_0 &_output_){
   Decimate__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Decimate_decimate_init(Decimate__ctx_type_0 &_output_){
   Decimate__ctx_type_0_init(_output_);
   return ;
}

float Decimate_decimate(Decimate__ctx_type_0 &_ctx, float in, float factor){
   int n;
   n = float_to_int((127.f * factor));
   n = int_clip(n,0,127);
   _ctx.count = (_ctx.count + 1);
   uint8_t _cond_0;
   _cond_0 = (_ctx.count > n);
   if(_cond_0){
      _ctx.count = 0;
      _ctx.out = in;
   }
   return _ctx.out;
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst1);
   Util__ctx_type_2_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, uint8_t gate, float a, float h, float r, uint8_t enabled, uint8_t loop, _tuple___real_real__ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t _cond_0;
   _cond_0 = Util_edge(_ctx._inst0,gate);
   if(_cond_0){
      _ctx.state = reset;
   }
   float resetting;
   uint8_t _cond_9;
   _cond_9 = (_ctx.state == reset);
   if(_cond_9){ resetting = 1.f; }
   else
   { resetting = 0.f; }
   uint8_t _cond_1;
   _cond_1 = (_ctx.state == reset);
   if(_cond_1){
      _ctx.rate = 1.96078431373f;
      _ctx.target = 0.f;
   }
   uint8_t _cond_2;
   _cond_2 = ((_ctx.state == attack) && enabled);
   if(_cond_2){
      _ctx.rate = (1.f / ((100.f * a) + 0.01f));
      _ctx.target = 1.2f;
   }
   uint8_t _cond_3;
   _cond_3 = (_ctx.state == hold);
   if(_cond_3){
      float hrate;
      hrate = (1.f / ((100.f * h) + 0.01f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_4;
   _cond_4 = (_ctx.state == release);
   if(_cond_4){
      _ctx.rate = (1.f / ((200.f * r) + 0.05f));
      _ctx.target = 0.f;
   }
   uint8_t _cond_5;
   _cond_5 = Util_edge(_ctx._inst1,(_ctx.out > 1.f));
   if(_cond_5){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   uint8_t _cond_6;
   _cond_6 = ((_ctx.out < 0.001f) && (_ctx.state == reset));
   if(_cond_6){
      _ctx.state = attack;
   }
   uint8_t _cond_7;
   _cond_7 = ((_ctx.hold_phase > 100.f) && (_ctx.state == hold));
   if(_cond_7){
      _ctx.state = release;
   }
   uint8_t _cond_8;
   _cond_8 = (loop && gate && (_ctx.state == release) && (_ctx.out < 0.001f));
   if(_cond_8){
      _ctx.state = reset;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f * Util_sampleRateScale()));
   _tuple___real_real__ _tuple_0;
   {
      _tuple_0.field_0 = float_clip(_ctx.out,0.f,1.f);
      _tuple_0.field_1 = resetting;
   }
   _output_ = _tuple_0;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   _ctx.enabled = 0;
   Util__ctx_type_2_init(_ctx._inst1);
   Util__ctx_type_2_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Ahr_loop_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_loop(Ahr__ctx_type_1 &_ctx, uint8_t gate, float a, float h, float r, _tuple___real_real__ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t _cond_0;
   _cond_0 = Util_edge(_ctx._inst0,gate);
   if(_cond_0){
      _ctx.state = reset;
      _ctx.hold_phase = 0.f;
      _ctx.enabled = 1;
   }
   float r_current;
   if(_ctx.enabled){ r_current = a; }
   else
   { r_current = r; }
   float hrate;
   hrate = (1.f / ((100.f * h) + 0.01f));
   _ctx.hold_phase = (_ctx.hold_phase + hrate);
   uint8_t _cond_1;
   _cond_1 = ((_ctx.hold_phase > 1600.f) && (_ctx.out > 0.45f) && (_ctx.out < 0.55f));
   if(_cond_1){
      _ctx.enabled = 0;
   }
   float resetting;
   uint8_t _cond_8;
   _cond_8 = (_ctx.state == reset);
   if(_cond_8){ resetting = 1.f; }
   else
   { resetting = 0.f; }
   uint8_t _cond_2;
   _cond_2 = (_ctx.state == reset);
   if(_cond_2){
      _ctx.rate = 1.96078431373f;
      _ctx.target = 0.f;
   }
   uint8_t _cond_3;
   _cond_3 = ((_ctx.state == attack) && _ctx.enabled);
   if(_cond_3){
      _ctx.rate = (1.f / ((100.f * a) + 0.01f));
      _ctx.target = 1.2f;
   }
   uint8_t _cond_4;
   _cond_4 = (_ctx.state == release);
   if(_cond_4){
      _ctx.rate = (1.f / ((200.f * r_current) + 0.01f));
      _ctx.target = 0.f;
   }
   uint8_t _cond_5;
   _cond_5 = Util_edge(_ctx._inst1,(_ctx.out > 1.f));
   if(_cond_5){
      _ctx.state = release;
   }
   uint8_t _cond_6;
   _cond_6 = ((_ctx.out < 0.001f) && (_ctx.state == reset));
   if(_cond_6){
      _ctx.state = attack;
   }
   uint8_t _cond_7;
   _cond_7 = ((_ctx.state == release) && (_ctx.out < 0.001f));
   if(_cond_7){
      _ctx.state = reset;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f * Util_sampleRateScale()));
   _tuple___real_real__ _tuple_0;
   {
      _tuple_0.field_0 = float_clip(_ctx.out,0.f,1.f);
      _tuple_0.field_1 = resetting;
   }
   _output_ = _tuple_0;
   return ;
}

void Trummor__ctx_type_0_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0 _ctx;
   _ctx.tone = 0.f;
   _ctx.pitch = 0.f;
   _ctx.level2 = 0.f;
   _ctx.level1 = 0.f;
   _ctx.int_osc = 0.f;
   _ctx.int_noise = 0.f;
   _ctx.ext_osc = 0.f;
   _ctx.ext_noise = 0.f;
   _ctx.env_enabled = 0;
   _ctx.env2_scale = 0.f;
   _ctx.env2_r = 0.f;
   _ctx.env2_h = 0.f;
   _ctx.env2_a = 0.f;
   _ctx.env1_scale = 0.f;
   _ctx.env1_r = 0.f;
   _ctx.env1_h = 0.f;
   _ctx.env1_a = 0.f;
   _ctx.drive = 0.f;
   _ctx.decimate = 0.f;
   _ctx.bend = 0.f;
   Tohe__ctx_type_2_init(_ctx._inst7);
   Decimate__ctx_type_0_init(_ctx._inst6);
   Noise__ctx_type_0_init(_ctx._inst5);
   Util__ctx_type_2_init(_ctx._inst4);
   Ahr__ctx_type_0_init(_ctx._inst3);
   Tricore__ctx_type_0_init(_ctx._inst2);
   Swept__ctx_type_0_init(_ctx._inst1);
   Ahr__ctx_type_0_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Trummor_do_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_do(Trummor__ctx_type_0 &_ctx, float main_gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   uint8_t gate;
   gate = (main_gate > 0.5f);
   float osc_env;
   float env_reset;
   _tuple___real_real__ _call_0;
   Ahr_do(_ctx._inst0,gate,(_ctx.env1_scale * _ctx.env1_a),(_ctx.env1_scale * _ctx.env1_h),(_ctx.env1_scale * _ctx.env1_r),_ctx.env_enabled,0,_call_0);
   osc_env = _call_0.field_0;env_reset = _call_0.field_1;
   float bend_cv;
   bend_cv = Swept_process(_ctx._inst1,(1.f + (- env_reset)),(_ctx.bend * 0.4f),0.f,0.1f);
   float cv;
   cv = (_ctx.pitch + bend_cv);
   float osc;
   uint8_t reset_osc;
   _tuple___real_bool__ _call_1;
   Tricore_process(_ctx._inst2,cv,0.f,env_reset,0.f,_call_1);
   osc = _call_1.field_0;reset_osc = _call_1.field_1;
   osc = ((_ctx.int_osc * osc) + (_ctx.ext_osc * osc_in));
   _ctx.env_enabled = bool_not(reset_osc);
   float osc_sat;
   osc_sat = Util_saturate(((_ctx.drive + 1.f) * osc));
   float noise_env;
   _tuple___real_real__ _call_2;
   Ahr_do(_ctx._inst3,gate,(_ctx.env2_scale * _ctx.env2_a),(_ctx.env2_scale * _ctx.env2_h),(_ctx.env2_scale * _ctx.env2_r),_ctx.env_enabled,0,_call_2);
   noise_env = _call_2.field_0;
   float noise_osc;
   uint8_t _cond_0;
   _cond_0 = (_ctx.decimate == 0.f);
   if(_cond_0){ noise_osc = ((_ctx.int_noise * (float_random() + -0.5f)) + (_ctx.ext_noise * noise_in)); }
   else
   { noise_osc = Decimate_decimate(_ctx._inst6,((_ctx.int_noise * Noise_syncronized(_ctx._inst5,Util_edge(_ctx._inst4,gate))) + (_ctx.ext_noise * noise_in)),_ctx.decimate); }
   noise_osc = Tohe_do(_ctx._inst7,noise_osc,_ctx.tone);
   float output;
   output = ((_ctx.level1 * osc_env * osc_sat) + (_ctx.level2 * noise_env * noise_osc));
   _tuple___real_real_real_real__ _tuple_3;
   {
      _tuple_3.field_0 = output;
      _tuple_3.field_1 = cv;
      _tuple_3.field_2 = osc_env;
      _tuple_3.field_3 = noise_env;
   }
   _output_ = _tuple_3;
   return ;
}

void Trummor_setLevel1_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setLevel1(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.level1 = float_clip(value,0.f,1.f);
}

void Trummor_setLevel2_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setLevel2(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.level2 = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1A_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1A(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_a = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1H_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1H(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_h = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1R_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1R(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_r = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2A_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2A(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_a = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2H_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2H(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_h = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2R_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2R(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_r = float_clip(value,0.f,1.f);
}

void Trummor_setPitch_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setPitch(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.pitch = float_clip(value,-1.f,1.f);
}

void Trummor_setBend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setBend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.bend = float_clip(value,-1.f,1.f);
}

void Trummor_setDrive_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setDrive(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.drive = float_clip(value,0.f,1.f);
}

void Trummor_setTone_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setTone(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.tone = float_clip(value,-1.f,1.f);
}

void Trummor_setOscBlend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setOscBlend(Trummor__ctx_type_0 &_ctx, float value){
   _tuple___real_real__ _call_0;
   Util_fade(value,_call_0);
   _ctx.int_osc = _call_0.field_0;_ctx.ext_osc = _call_0.field_1;
}

void Trummor_setNoiseBlend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setNoiseBlend(Trummor__ctx_type_0 &_ctx, float value){
   _tuple___real_real__ _call_0;
   Util_fade(value,_call_0);
   _ctx.int_noise = _call_0.field_0;_ctx.ext_noise = _call_0.field_1;
}

void Trummor_setEnv1Scale_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1Scale(Trummor__ctx_type_0 &_ctx, float value){
   uint8_t _cond_0;
   _cond_0 = (value < 0.5f);
   if(_cond_0){ _ctx.env1_scale = 1.f; }
   else
   { _ctx.env1_scale = 0.2f; }
}

void Trummor_setEnv2Scale_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2Scale(Trummor__ctx_type_0 &_ctx, float value){
   uint8_t _cond_0;
   _cond_0 = (value < 0.5f);
   if(_cond_0){ _ctx.env2_scale = 1.f; }
   else
   { _ctx.env2_scale = 0.2f; }
}

void Trummor_setDecimate_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setDecimate(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.decimate = float_clip(value,0.f,1.f);
}

float Tangents_tune(float cut, float fs, float oversampling){
   float f;
   f = Util_cvTokHz(cut);
   float fh;
   fh = ((6.28318530718f * f) / (oversampling * fs));
   return fh;
}

float Tangents_tune_44100(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_44100_c0)[index] + (cut * (float_wrap_array(Tangents_tune_44100_c1)[index] + (float_wrap_array(Tangents_tune_44100_c2)[index] * cut))));
}

float Tangents_tune_48000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_48000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_48000_c1)[index] + (float_wrap_array(Tangents_tune_48000_c2)[index] * cut))));
}

float Tangents_tune_88200(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_88200_c0)[index] + (cut * (float_wrap_array(Tangents_tune_88200_c1)[index] + (float_wrap_array(Tangents_tune_88200_c2)[index] * cut))));
}

float Tangents_tune_96000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_96000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_96000_c1)[index] + (float_wrap_array(Tangents_tune_96000_c2)[index] * cut))));
}

float Tangents_tune_176400(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_176400_c0)[index] + (cut * (float_wrap_array(Tangents_tune_176400_c1)[index] + (float_wrap_array(Tangents_tune_176400_c2)[index] * cut))));
}

float Tangents_tune_192000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_192000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_192000_c1)[index] + (float_wrap_array(Tangents_tune_192000_c2)[index] * cut))));
}

float Tangents_getTune(float cut, float fs){
   uint8_t _cond_5;
   _cond_5 = (fs == 44100.f);
   if(_cond_5){
      return Tangents_tune_44100(cut);
   }
   else
   {
      uint8_t _cond_4;
      _cond_4 = (fs == 48000.f);
      if(_cond_4){
         return Tangents_tune_48000(cut);
      }
      else
      {
         uint8_t _cond_3;
         _cond_3 = (fs == 88200.f);
         if(_cond_3){
            return Tangents_tune_88200(cut);
         }
         else
         {
            uint8_t _cond_2;
            _cond_2 = (fs == 96000.f);
            if(_cond_2){
               return Tangents_tune_96000(cut);
            }
            else
            {
               uint8_t _cond_1;
               _cond_1 = (fs == 176400.f);
               if(_cond_1){
                  return Tangents_tune_176400(cut);
               }
               else
               {
                  uint8_t _cond_0;
                  _cond_0 = (fs == 192000.f);
                  if(_cond_0){
                     return Tangents_tune_192000(cut);
                  }
                  else
                  {
                     return Tangents_tune(cut,fs,4.f);
                  }
               }
            }
         }
      }
   }
}

void Tangents__ctx_type_8_init(Tangents__ctx_type_8 &_output_){
   Tangents__ctx_type_8 _ctx;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Tangents_heun_init(Tangents__ctx_type_8 &_output_){
   Tangents__ctx_type_8_init(_output_);
   return ;
}

float Tangents_heun(Tangents__ctx_type_8 &_ctx, float lp, float bp, float hp, float wh, float cut, float res){
   float resfactor;
   resfactor = 2.f;
   float yt;
   yt = Util_cubic_clipper((hp + _ctx.p0));
   float feedt;
   feedt = (resfactor * res * yt);
   float dpt0;
   dpt0 = ((bp + (- hp) + feedt + (- _ctx.p0) + _ctx.p1) * wh);
   float dpt1;
   dpt1 = (((-2.f * bp) + hp + lp + (-2.f * feedt) + _ctx.p0 + (-2.f * _ctx.p1)) * wh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float yn;
   yn = Util_cubic_clipper((hp + pt0));
   float feed;
   feed = (resfactor * res * yn);
   float dp0;
   dp0 = ((bp + (- hp) + feed + (- pt0) + pt1) * wh);
   float dp1;
   dp1 = (((-2.f * bp) + hp + lp + (-2.f * feed) + pt0 + (-2.f * pt1)) * wh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   return Util_cubic_clipper((hp + _ctx.p0));
}

void Tangents__ctx_type_9_init(Tangents__ctx_type_9 &_output_){
   Tangents__ctx_type_9 _ctx;
   Tangents__ctx_type_8_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_30_init(_ctx.d4);
   Util__ctx_type_31_init(_ctx.d2);
   Util__ctx_type_27_init(_ctx._inst7);
   Util__ctx_type_27_init(_ctx._inst6);
   Util__ctx_type_27_init(_ctx._inst5);
   Util__ctx_type_28_init(_ctx._inst4);
   Util__ctx_type_28_init(_ctx._inst3);
   Util__ctx_type_28_init(_ctx._inst2);
   Util__ctx_type_3_init(_ctx._inst1);
   Util__ctx_type_3_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Tangents_process_heun_init(Tangents__ctx_type_9 &_output_){
   Tangents__ctx_type_9_init(_output_);
   return ;
}

float Tangents_process_heun(Tangents__ctx_type_9 &_ctx, float lp, float bp, float hp, float cut, float res, uint8_t lp_on, uint8_t bp_on, uint8_t hp_on){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_0;
   _cond_0 = (Util_change(_ctx._inst0,cut) || Util_change(_ctx._inst1,fs));
   if(_cond_0){
      _ctx.fh = Tangents_getTune(cut,fs);
   }
   float out;
   out = 0.f;
   uint8_t _cond_2;
   _cond_2 = ((fs == 176400.f) || (fs == 192000.f));
   if(_cond_2){
      out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
   }
   else
   {
      uint8_t _cond_1;
      _cond_1 = ((fs == 88200.f) || (fs == 96000.f));
      if(_cond_1){
         float lp1;
         if(lp_on){ lp1 = Util_upsampleOrder1_2x(_ctx._inst2,lp); }
         else
         { lp1 = 0.f; }
         float bp1;
         if(bp_on){ bp1 = Util_upsampleOrder1_2x(_ctx._inst3,bp); }
         else
         { bp1 = 0.f; }
         float hp1;
         if(hp_on){ hp1 = Util_upsampleOrder1_2x(_ctx._inst4,hp); }
         else
         { hp1 = 0.f; }
         float out1;
         out1 = Tangents_heun(_ctx.h,lp1,bp1,hp1,_ctx.fh,cut,res);
         float out0;
         out0 = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
         Util_decimate_2x_skip(_ctx.d2,out1);
         out = Util_decimate_2x_do(_ctx.d2,out0);
      }
      else
      {
         float lp3;
         float lp2;
         float lp1;
         if(lp_on){
            _tuple___real_real_real__ _call_0;
            Util_upsampleOrder1_4x(_ctx._inst5,lp,_call_0);
            lp3 = _call_0.field_0;lp2 = _call_0.field_1;lp1 = _call_0.field_2;
         }
         else
         {
            lp3 = 0.f;
            lp2 = 0.f;
            lp1 = 0.f;
         }
         float bp3;
         float bp2;
         float bp1;
         if(bp_on){
            _tuple___real_real_real__ _call_2;
            Util_upsampleOrder1_4x(_ctx._inst6,bp,_call_2);
            bp3 = _call_2.field_0;bp2 = _call_2.field_1;bp1 = _call_2.field_2;
         }
         else
         {
            bp3 = 0.f;
            bp2 = 0.f;
            bp1 = 0.f;
         }
         float hp3;
         float hp2;
         float hp1;
         if(hp_on){
            _tuple___real_real_real__ _call_4;
            Util_upsampleOrder1_4x(_ctx._inst7,hp,_call_4);
            hp3 = _call_4.field_0;hp2 = _call_4.field_1;hp1 = _call_4.field_2;
         }
         else
         {
            hp3 = 0.f;
            hp2 = 0.f;
            hp1 = 0.f;
         }
         float out3;
         out3 = Tangents_heun(_ctx.h,lp3,bp3,hp3,_ctx.fh,cut,res);
         float out2;
         out2 = Tangents_heun(_ctx.h,lp2,bp2,hp2,_ctx.fh,cut,res);
         float out1;
         out1 = Tangents_heun(_ctx.h,lp1,bp1,hp1,_ctx.fh,cut,res);
         float out0;
         out0 = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
         Util_decimate_4x_skip(_ctx.d4,out3);
         Util_decimate_4x_skip(_ctx.d4,out2);
         Util_decimate_4x_skip(_ctx.d4,out1);
         out = Util_decimate_4x_do(_ctx.d4,out0);
      }
   }
   return out;
}

void Tangents__ctx_type_10_init(Tangents__ctx_type_10 &_output_){
   Tangents__ctx_type_10 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Tangents_simple_noise_init(Tangents__ctx_type_10 &_output_){
   Tangents__ctx_type_10_init(_output_);
   return ;
}

float Tangents_simple_noise(Tangents__ctx_type_10 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

void Tangents__ctx_type_11_init(Tangents__ctx_type_11 &_output_){
   Tangents__ctx_type_11 _ctx;
   Tangents__ctx_type_9_init(_ctx._inst1);
   Util__ctx_type_19_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Tangents_process_init(Tangents__ctx_type_11 &_output_){
   Tangents__ctx_type_11_init(_output_);
   return ;
}

float Tangents_process(Tangents__ctx_type_11 &_ctx, float lp, float bp, float hp, float cut_in, float res_in, uint8_t lp_on, uint8_t bp_on, uint8_t hp_on){
   float res;
   res = Util_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.f,0.15f);
   float limit;
   uint8_t _cond_0;
   _cond_0 = (comp > 0.f);
   if(_cond_0){ limit = (0.9f + (- comp)); }
   else
   { limit = 0.9f; }
   float cut;
   cut = float_clip(cut_in,0.f,limit);
   float noise;
   uint8_t _cond_1;
   _cond_1 = (bool_not(lp_on) && bool_not(bp_on) && bool_not(hp_on));
   if(_cond_1){ noise = (Util_simple_noise(_ctx._inst0) * 0.001f); }
   else
   { noise = 0.f; }
   return Tangents_process_heun(_ctx._inst1,(lp + noise),bp,hp,cut,res,lp_on,bp_on,hp_on);
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(16000,0.f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0_init(_output_);
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((_ctx.write_pos + 1) % 16000);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 16000.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- (Util_cvToperiodUnit(cv) * getSampleRate()))),r_size);
   uint8_t _cond_0;
   _cond_0 = (r_index < 0.f);
   if(_cond_0){ r_index = (r_size + r_index); }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 16000);
   int t2;
   t2 = ((t1 + 1) % 16000);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   return ret;
}

float Rescomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.25f * (tone + 1.2f))),0,63);
   return (float_wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Rescomb_toneCurve_c1)[index] + (float_wrap_array(Rescomb_toneCurve_c2)[index] * tone))));
}

void Rescomb__ctx_type_2_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2 _ctx;
   _ctx.stone = 0.f;
   _ctx.output = 0.f;
   Rescomb__ctx_type_0_init(_ctx._inst2);
   Util__ctx_type_9_init(_ctx._inst1);
   Util__ctx_type_3_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Rescomb_do_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2_init(_output_);
   return ;
}

float Rescomb_do(Rescomb__ctx_type_2 &_ctx, float in, float cv, float tone, float res){
   uint8_t _cond_0;
   _cond_0 = Util_change(_ctx._inst0,tone);
   if(_cond_0){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst1,(_ctx.output * res));
   float saturated_input;
   saturated_input = Util_stanh((in + feedback));
   _ctx.output = ((_ctx.stone * Rescomb_delay(_ctx._inst2,saturated_input,cv)) + in);
   return Util_stanh(_ctx.output);
}

float Trummor2_shape(float x, float shaper, float sub){
   float out;
   out = 0.f;
   uint8_t _cond_0;
   _cond_0 = (shaper < 0.f);
   if(_cond_0){
      float comp;
      comp = Util_map(sub,0.f,1.f,1.f,0.7f);
      float xx;
      xx = (comp * x);
      out = Util_shaper(((xx * Util_fadeA((- shaper))) + (Util_cheby3(xx) * Util_fadeB((- shaper)))));
   }
   else
   {
      out = Util_shaper(((shaper + 1.f) * x));
   }
   return out;
}

void Trummor2__ctx_type_1_init(Trummor2__ctx_type_1 &_output_){
   Trummor2__ctx_type_1 _ctx;
   Stabile__ctx_type_8_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Trummor2_filterS_init(Trummor2__ctx_type_1 &_output_){
   Trummor2__ctx_type_1_init(_output_);
   return ;
}

float Trummor2_filterS(Trummor2__ctx_type_1 &_ctx, float x, float cutoff, float resonance, float filter_type){
   float out;
   float low;
   float band;
   float high;
   _tuple___real_real_real_real__ _call_0;
   Stabile_process(_ctx._inst0,x,float_clip(cutoff,0.f,0.92f),(40.f * resonance),0.f,_call_0);
   low = _call_0.field_0;band = _call_0.field_1;high = _call_0.field_2;
   uint8_t _cond_0;
   _cond_0 = (filter_type < 1.f);
   if(_cond_0){ out = low; }
   else
   {
      uint8_t _cond_1;
      _cond_1 = (filter_type < 2.f);
      if(_cond_1){ out = band; }
      else
      { out = high; }
   }
   return out;
}

void Trummor2__ctx_type_2_init(Trummor2__ctx_type_2 &_output_){
   Trummor2__ctx_type_2 _ctx;
   Tangents__ctx_type_11_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Trummor2_filterP_init(Trummor2__ctx_type_2 &_output_){
   Trummor2__ctx_type_2_init(_output_);
   return ;
}

float Trummor2_filterP(Trummor2__ctx_type_2 &_ctx, float x, float cutoff, float resonance, float filter_type){
   uint8_t lp_on;
   lp_on = (filter_type < 1.f);
   uint8_t bp_on;
   bp_on = ((filter_type < 2.f) && (filter_type >= 1.f));
   uint8_t hp_on;
   hp_on = ((filter_type < 3.f) && (filter_type >= 2.f));
   float lp;
   float bp;
   float hp;
   if(lp_on){
      lp = x;
      bp = 0.f;
      hp = 0.f;
   }
   else
   { if(bp_on){
      lp = 0.f;
      bp = x;
      hp = 0.f;
   }
   else
   {
      lp = 0.f;
      bp = 0.f;
      hp = x;
   } }
   return Tangents_process(_ctx._inst0,lp,bp,hp,cutoff,(0.6f * Util_polylog(resonance)),lp_on,bp_on,hp_on);
}

void Trummor2__ctx_type_3_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3 _ctx;
   Ahr__ctx_type_0_init(_ctx._inst1);
   Ahr__ctx_type_1_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Trummor2_env_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_env(Trummor2__ctx_type_3 &_ctx, uint8_t gate, uint8_t sep_gate, float env_mode, float env_a, float env_h, float env_r, uint8_t env_enabled, _tuple___real_real__ &_output_){
   uint8_t env_fast;
   env_fast = (env_mode > 0.5f);
   uint8_t env_loop;
   env_loop = (env_mode > 1.5f);
   float env_ar_scale;
   uint8_t _cond_0;
   _cond_0 = (env_fast && env_loop);
   if(_cond_0){ env_ar_scale = 0.05f; }
   else
   { if(env_fast){ env_ar_scale = 0.2f; }
   else
   { env_ar_scale = 1.f; } }
   float env_ah_scale;
   if(env_fast){ env_ah_scale = 0.2f; }
   else
   { env_ah_scale = 1.f; }
   float env_aa;
   env_aa = (env_a * env_a);
   float env_hh;
   env_hh = (env_h * env_h);
   float env_rr;
   env_rr = (env_r * env_r);
   float out_env;
   float env_reset;
   if(env_loop){
      _tuple___real_real__ _call_2;
      Ahr_loop(_ctx._inst0,(gate || sep_gate),(env_ar_scale * env_aa),(env_ah_scale * env_hh),env_rr,_call_2);
      out_env = _call_2.field_0;env_reset = _call_2.field_1;
   }
   else
   {
      _tuple___real_real__ _call_3;
      Ahr_do(_ctx._inst1,(gate || sep_gate),(env_ar_scale * env_aa),(env_ah_scale * env_hh),(env_ar_scale * env_rr),env_enabled,env_loop,_call_3);
      out_env = _call_3.field_0;env_reset = _call_3.field_1;
   }
   if(env_fast){ out_env = Util_polylog(out_env); }
   _tuple___real_real__ _tuple_0;
   {
      _tuple_0.field_0 = out_env;
      _tuple_0.field_1 = env_reset;
   }
   _output_ = _tuple_0;
   return ;
}

void Trummor2__ctx_type_4_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4 _ctx;
   _ctx.wave = 0.f;
   _ctx.tone = 0.f;
   _ctx.sub = 0.f;
   _ctx.shaper = 0.f;
   _ctx.ring_sel = 0;
   _ctx.resonance = 0.f;
   _ctx.rescomb = 0.f;
   _ctx.pitch = 0.f;
   _ctx.noise_tune = 0.f;
   _ctx.level2 = 0.f;
   _ctx.level1 = 0.f;
   _ctx.int_osc = 0.f;
   _ctx.int_noise = 0.f;
   _ctx.filter = 0.f;
   _ctx.ext_osc = 0.f;
   _ctx.ext_noise = 0.f;
   _ctx.env_enabled = 0;
   _ctx.env2_r = 0.f;
   _ctx.env2_mode = 0.f;
   _ctx.env2_h = 0.f;
   _ctx.env2_a = 0.f;
   _ctx.env1_r = 0.f;
   _ctx.env1_mode = 0.f;
   _ctx.env1_h = 0.f;
   _ctx.env1_a = 0.f;
   _ctx.cutoff = 0.f;
   _ctx.bend_time = 0.f;
   _ctx.bend = 0.f;
   Rescomb__ctx_type_2_init(_ctx._inst7);
   Trummor2__ctx_type_2_init(_ctx._inst6);
   Tohe__ctx_type_2_init(_ctx._inst5);
   Trummor2__ctx_type_3_init(_ctx._inst4);
   Tricore__ctx_type_0_init(_ctx._inst3);
   Tricore__ctx_type_0_init(_ctx._inst2);
   Swept__ctx_type_0_init(_ctx._inst1);
   Trummor2__ctx_type_3_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Trummor2_do_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_do(Trummor2__ctx_type_4 &_ctx, float main_gate, float osc_in, float noise_in, float osc_gate, float noise_gate, _tuple___real_real_real_real_real_real__ &_output_){
   uint8_t gate;
   gate = (main_gate > 0.5f);
   uint8_t ogate;
   ogate = (osc_gate > 0.5f);
   uint8_t ngate;
   ngate = (noise_gate > 0.5f);
   float osc_env;
   float env_reset;
   _tuple___real_real__ _call_0;
   Trummor2_env(_ctx._inst0,gate,ogate,_ctx.env1_mode,_ctx.env1_a,_ctx.env1_h,_ctx.env1_r,_ctx.env_enabled,_call_0);
   osc_env = _call_0.field_0;env_reset = _call_0.field_1;
   float swept;
   swept = Swept_process(_ctx._inst1,(1.f + (- env_reset)),(_ctx.bend * 0.6f),0.f,_ctx.bend_time);
   float cv;
   cv = (_ctx.pitch + swept);
   float sub_osc;
   uint8_t reset_sub;
   _tuple___real_bool__ _call_1;
   Tricore_process(_ctx._inst2,(cv + -0.1f),0.f,env_reset,_ctx.wave,_call_1);
   sub_osc = _call_1.field_0;reset_sub = _call_1.field_1;
   float osc;
   uint8_t reset_osc;
   _tuple___real_bool__ _call_2;
   Tricore_process(_ctx._inst3,cv,0.f,env_reset,_ctx.wave,_call_2);
   osc = _call_2.field_0;reset_osc = _call_2.field_1;
   float osc_level;
   float sub_level;
   _tuple___real_real__ _call_3;
   Util_fade((_ctx.sub * 0.5f),_call_3);
   osc_level = _call_3.field_0;sub_level = _call_3.field_1;
   osc = ((sub_level * sub_osc) + (osc * osc_level));
   osc = ((_ctx.int_osc * osc) + (_ctx.ext_osc * osc_in));
   osc = Trummor2_shape((0.7f * osc),_ctx.shaper,_ctx.sub);
   _ctx.env_enabled = (bool_not(reset_sub) && bool_not(reset_osc));
   float noise_env;
   _tuple___real_real__ _call_4;
   Trummor2_env(_ctx._inst4,gate,ngate,_ctx.env2_mode,_ctx.env2_a,_ctx.env2_h,_ctx.env2_r,(_ctx.env_enabled || bool_not(gate)),_call_4);
   noise_env = _call_4.field_0;
   float noise_osc;
   noise_osc = (((float_random() + -0.5f) * _ctx.int_noise) + (_ctx.ext_noise * noise_in));
   noise_osc = Tohe_do(_ctx._inst5,noise_osc,_ctx.tone);
   float filter_output;
   filter_output = Trummor2_filterP(_ctx._inst6,(noise_osc * noise_env),_ctx.cutoff,_ctx.resonance,_ctx.filter);
   float comb;
   comb = float_clip((9.f * _ctx.rescomb * _ctx.rescomb),-1.f,1.f);
   uint8_t _cond_0;
   _cond_0 = (_ctx.rescomb < 0.f);
   if(_cond_0){ comb = (- comb); }
   filter_output = Rescomb_do(_ctx._inst7,filter_output,_ctx.noise_tune,comb,fabsf(_ctx.rescomb));
   float osc_output;
   osc_output = (_ctx.level1 * osc_env * osc);
   float noise_output;
   noise_output = (0.5f * _ctx.level2 * filter_output);
   float output;
   output = (osc_output + noise_output);
   _tuple___real_real_real_real_real_real__ _tuple_5;
   {
      _tuple_5.field_0 = output;
      _tuple_5.field_1 = cv;
      _tuple_5.field_2 = osc_env;
      _tuple_5.field_3 = noise_env;
      _tuple_5.field_4 = osc_output;
      _tuple_5.field_5 = noise_output;
   }
   _output_ = _tuple_5;
   return ;
}

void Trummor2_setLevel1_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setLevel1(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.level1 = float_clip(value,0.f,1.f);
}

void Trummor2_setLevel2_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setLevel2(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.level2 = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv1A_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv1A(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env1_a = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv1H_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv1H(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env1_h = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv1R_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv1R(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env1_r = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv2A_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv2A(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env2_a = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv2H_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv2H(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env2_h = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv2R_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv2R(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env2_r = float_clip(value,0.f,1.f);
}

void Trummor2_setPitch_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setPitch(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.pitch = float_clip(value,-1.f,1.f);
}

void Trummor2_setBend_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setBend(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.bend = float_clip(value,-1.f,1.f);
}

void Trummor2_setShaper_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setShaper(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.shaper = float_clip(value,-1.f,1.f);
}

void Trummor2_setWave_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setWave(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.wave = float_clip(value,-1.f,1.f);
}

void Trummor2_setNoiseTune_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setNoiseTune(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.noise_tune = float_clip(value,-0.1f,0.9f);
}

void Trummor2_setRescomb_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setRescomb(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.rescomb = float_clip(value,-1.f,1.f);
}

void Trummor2_setTone_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setTone(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.tone = float_clip(value,-1.f,1.f);
}

void Trummor2_setOscBlend_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setOscBlend(Trummor2__ctx_type_4 &_ctx, float value){
   float mix;
   mix = float_clip(value,0.f,1.f);
   _tuple___real_real__ _call_0;
   Util_fade(mix,_call_0);
   _ctx.int_osc = _call_0.field_0;_ctx.ext_osc = _call_0.field_1;
}

void Trummor2_setNoiseBlend_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setNoiseBlend(Trummor2__ctx_type_4 &_ctx, float value){
   float mix;
   mix = float_clip(value,0.f,1.f);
   _tuple___real_real__ _call_0;
   Util_fade(mix,_call_0);
   _ctx.int_noise = _call_0.field_0;_ctx.ext_noise = _call_0.field_1;
}

void Trummor2_setEnv1Scale_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv1Scale(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env1_mode = value;
}

void Trummor2_setEnv2Scale_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setEnv2Scale(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.env2_mode = value;
}

void Trummor2_setRingSel_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setRingSel(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.ring_sel = (value > 0.5f);
}

void Trummor2_setBendTime_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setBendTime(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.bend_time = value;
}

void Trummor2_setSub_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setSub(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.sub = float_clip(value,0.f,1.f);
}

void Trummor2_setCutoff_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setCutoff(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.cutoff = float_clip(value,0.f,0.92f);
}

void Trummor2_setResonance_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setResonance(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.resonance = float_clip(value,0.f,1.f);
}

void Trummor2_setFilter_init(Trummor2__ctx_type_4 &_output_){
   Trummor2__ctx_type_4_init(_output_);
   return ;
}

void Trummor2_setFilter(Trummor2__ctx_type_4 &_ctx, float value){
   _ctx.filter = float_clip(value,0.f,2.f);
}

float Lateralus_tune(float cut, float fs, float oversampling){
   float f;
   f = Util_cvTokHz(cut);
   float fh;
   fh = ((6.28318530718f * f) / (oversampling * fs));
   return fh;
}

float Lateralus_tune_44100(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_44100_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_44100_c1)[index] + (float_wrap_array(Lateralus_tune_44100_c2)[index] * cut))));
}

float Lateralus_tune_48000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_48000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_48000_c1)[index] + (float_wrap_array(Lateralus_tune_48000_c2)[index] * cut))));
}

float Lateralus_tune_88200(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_88200_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_88200_c1)[index] + (float_wrap_array(Lateralus_tune_88200_c2)[index] * cut))));
}

float Lateralus_tune_96000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_96000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_96000_c1)[index] + (float_wrap_array(Lateralus_tune_96000_c2)[index] * cut))));
}

float Lateralus_tune_176400(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_176400_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_176400_c1)[index] + (float_wrap_array(Lateralus_tune_176400_c2)[index] * cut))));
}

float Lateralus_tune_192000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_192000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_192000_c1)[index] + (float_wrap_array(Lateralus_tune_192000_c2)[index] * cut))));
}

float Lateralus_getTune(float cut, float fs){
   uint8_t _cond_5;
   _cond_5 = (fs == 44100.f);
   if(_cond_5){
      return Lateralus_tune_44100(cut);
   }
   else
   {
      uint8_t _cond_4;
      _cond_4 = (fs == 48000.f);
      if(_cond_4){
         return Lateralus_tune_48000(cut);
      }
      else
      {
         uint8_t _cond_3;
         _cond_3 = (fs == 88200.f);
         if(_cond_3){
            return Lateralus_tune_88200(cut);
         }
         else
         {
            uint8_t _cond_2;
            _cond_2 = (fs == 96000.f);
            if(_cond_2){
               return Lateralus_tune_96000(cut);
            }
            else
            {
               uint8_t _cond_1;
               _cond_1 = (fs == 176400.f);
               if(_cond_1){
                  return Lateralus_tune_176400(cut);
               }
               else
               {
                  uint8_t _cond_0;
                  _cond_0 = (fs == 192000.f);
                  if(_cond_0){
                     return Lateralus_tune_192000(cut);
                  }
                  else
                  {
                     return Lateralus_tune(cut,fs,4.f);
                  }
               }
            }
         }
      }
   }
}

void Lateralus__ctx_type_8_init(Lateralus__ctx_type_8 &_output_){
   Lateralus__ctx_type_8 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Lateralus_heun_init(Lateralus__ctx_type_8 &_output_){
   Lateralus__ctx_type_8_init(_output_);
   return ;
}

void Lateralus_heun(Lateralus__ctx_type_8 &_ctx, float input, float fh, float res, _tuple___real_real_real_real__ &_output_){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * res * _ctx.p3)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = ((wt0 + (- wt1)) * fh);
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = ((wt1 + (- wt3)) * fh);
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = ((wt3 + (- wt5)) * fh);
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = ((wt5 + (- wt7)) * fh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * res * pt3)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = ((w0 + (- w1)) * fh);
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = ((w1 + (- w3)) * fh);
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = ((w3 + (- w5)) * fh);
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = ((w5 + (- w7)) * fh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   _ctx.p2 = (_ctx.p2 + ((dp2 + dpt2) * 0.5f));
   _ctx.p3 = (_ctx.p3 + ((dp3 + dpt3) * 0.5f));
   _tuple___real_real_real_real__ _tuple_0;
   {
      _tuple_0.field_0 = _ctx.p0;
      _tuple_0.field_1 = _ctx.p1;
      _tuple_0.field_2 = _ctx.p2;
      _tuple_0.field_3 = _ctx.p3;
   }
   _output_ = _tuple_0;
   return ;
}

void Lateralus__ctx_type_9_init(Lateralus__ctx_type_9 &_output_){
   Lateralus__ctx_type_9 _ctx;
   Lateralus__ctx_type_8_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_31_init(_ctx.d6_2);
   Util__ctx_type_30_init(_ctx.d6);
   Util__ctx_type_31_init(_ctx.d24_2);
   Util__ctx_type_30_init(_ctx.d24);
   Util__ctx_type_31_init(_ctx.d18_2);
   Util__ctx_type_30_init(_ctx.d18);
   Util__ctx_type_31_init(_ctx.d12_2);
   Util__ctx_type_30_init(_ctx.d12);
   Util__ctx_type_27_init(_ctx._inst3);
   Util__ctx_type_28_init(_ctx._inst2);
   Util__ctx_type_3_init(_ctx._inst1);
   Util__ctx_type_3_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Lateralus_process_heun_init(Lateralus__ctx_type_9 &_output_){
   Lateralus__ctx_type_9_init(_output_);
   return ;
}

void Lateralus_process_heun(Lateralus__ctx_type_9 &_ctx, float input, float cut, float res, uint8_t db6_on, uint8_t db12_on, uint8_t db18_on, uint8_t db24_on, _tuple___real_real_real_real__ &_output_){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_0;
   _cond_0 = (Util_change(_ctx._inst0,cut) || Util_change(_ctx._inst1,fs));
   if(_cond_0){
      _ctx.fh = Lateralus_getTune(cut,fs);
   }
   float db6;
   float db12;
   float db18;
   float db24;
   db6 = 0.f;
   db12 = 0.f;
   db18 = 0.f;
   db24 = 0.f;
   uint8_t _cond_2;
   _cond_2 = ((fs == 176400.f) || (fs == 192000.f));
   if(_cond_2){
      _tuple___real_real_real_real__ _call_1;
      Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_1);
      db6 = _call_1.field_0;db12 = _call_1.field_1;db18 = _call_1.field_2;db24 = _call_1.field_3;
   }
   else
   {
      uint8_t _cond_1;
      _cond_1 = ((fs == 88200.f) || (fs == 96000.f));
      if(_cond_1){
         float input1;
         input1 = Util_upsampleOrder1_2x(_ctx._inst2,input);
         float db6_1;
         float db12_1;
         float db18_1;
         float db24_1;
         _tuple___real_real_real_real__ _call_3;
         Lateralus_heun(_ctx.h,input1,_ctx.fh,res,_call_3);
         db6_1 = _call_3.field_0;db12_1 = _call_3.field_1;db18_1 = _call_3.field_2;db24_1 = _call_3.field_3;
         float db6_0;
         float db12_0;
         float db18_0;
         float db24_0;
         _tuple___real_real_real_real__ _call_4;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_4);
         db6_0 = _call_4.field_0;db12_0 = _call_4.field_1;db18_0 = _call_4.field_2;db24_0 = _call_4.field_3;
         if(db6_on){
            Util_decimate_2x_skip(_ctx.d6_2,db6_1);
            db6 = Util_decimate_2x_do(_ctx.d6_2,db6_0);
         }
         if(db12_on){
            Util_decimate_2x_skip(_ctx.d12_2,db12_1);
            db12 = Util_decimate_2x_do(_ctx.d12_2,db12_0);
         }
         if(db18_on){
            Util_decimate_2x_skip(_ctx.d18_2,db18_1);
            db18 = Util_decimate_2x_do(_ctx.d18_2,db18_0);
         }
         if(db24_on){
            Util_decimate_2x_skip(_ctx.d24_2,db24_1);
            db24 = Util_decimate_2x_do(_ctx.d24_2,db24_0);
         }
      }
      else
      {
         float input3;
         float input2;
         float input1;
         _tuple___real_real_real__ _call_7;
         Util_upsampleOrder1_4x(_ctx._inst3,input,_call_7);
         input3 = _call_7.field_0;input2 = _call_7.field_1;input1 = _call_7.field_2;
         float db6_3;
         float db12_3;
         float db18_3;
         float db24_3;
         _tuple___real_real_real_real__ _call_8;
         Lateralus_heun(_ctx.h,input3,_ctx.fh,res,_call_8);
         db6_3 = _call_8.field_0;db12_3 = _call_8.field_1;db18_3 = _call_8.field_2;db24_3 = _call_8.field_3;
         float db6_2;
         float db12_2;
         float db18_2;
         float db24_2;
         _tuple___real_real_real_real__ _call_9;
         Lateralus_heun(_ctx.h,input2,_ctx.fh,res,_call_9);
         db6_2 = _call_9.field_0;db12_2 = _call_9.field_1;db18_2 = _call_9.field_2;db24_2 = _call_9.field_3;
         float db6_1;
         float db12_1;
         float db18_1;
         float db24_1;
         _tuple___real_real_real_real__ _call_10;
         Lateralus_heun(_ctx.h,input1,_ctx.fh,res,_call_10);
         db6_1 = _call_10.field_0;db12_1 = _call_10.field_1;db18_1 = _call_10.field_2;db24_1 = _call_10.field_3;
         float db6_0;
         float db12_0;
         float db18_0;
         float db24_0;
         _tuple___real_real_real_real__ _call_11;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_11);
         db6_0 = _call_11.field_0;db12_0 = _call_11.field_1;db18_0 = _call_11.field_2;db24_0 = _call_11.field_3;
         if(db6_on){
            Util_decimate_4x_skip(_ctx.d6,db6_3);
            Util_decimate_4x_skip(_ctx.d6,db6_2);
            Util_decimate_4x_skip(_ctx.d6,db6_1);
            db6 = Util_decimate_4x_do(_ctx.d6,db6_0);
         }
         if(db12_on){
            Util_decimate_4x_skip(_ctx.d12,db12_3);
            Util_decimate_4x_skip(_ctx.d12,db12_2);
            Util_decimate_4x_skip(_ctx.d12,db12_1);
            db12 = Util_decimate_4x_do(_ctx.d12,db12_0);
         }
         if(db18_on){
            Util_decimate_4x_skip(_ctx.d18,db18_3);
            Util_decimate_4x_skip(_ctx.d18,db18_2);
            Util_decimate_4x_skip(_ctx.d18,db18_1);
            db18 = Util_decimate_4x_do(_ctx.d18,db18_0);
         }
         if(db24_on){
            Util_decimate_4x_skip(_ctx.d24,db24_3);
            Util_decimate_4x_skip(_ctx.d24,db24_2);
            Util_decimate_4x_skip(_ctx.d24,db24_1);
            db24 = Util_decimate_4x_do(_ctx.d24,db24_0);
         }
      }
   }
   _tuple___real_real_real_real__ _tuple_17;
   {
      _tuple_17.field_0 = db6;
      _tuple_17.field_1 = (db12 * (1.f + (res * 0.5f)));
      _tuple_17.field_2 = (db18 * (1.f + res));
      _tuple_17.field_3 = (db24 * (1.f + (res * 1.5f)));
   }
   _output_ = _tuple_17;
   return ;
}

void Lateralus__ctx_type_10_init(Lateralus__ctx_type_10 &_output_){
   Lateralus__ctx_type_10 _ctx;
   Lateralus__ctx_type_9_init(_ctx._inst1);
   Util__ctx_type_19_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void Lateralus_process_init(Lateralus__ctx_type_10 &_output_){
   Lateralus__ctx_type_10_init(_output_);
   return ;
}

void Lateralus_process(Lateralus__ctx_type_10 &_ctx, float input, float cut_in, float res_in, uint8_t db6_on, uint8_t db12_on, uint8_t db18_on, uint8_t db24_on, uint8_t input_on, _tuple___real_real_real_real__ &_output_){
   float res;
   res = Util_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.f,0.15f);
   float limit;
   uint8_t _cond_0;
   _cond_0 = (comp > 0.f);
   if(_cond_0){ limit = (0.9f + (- comp)); }
   else
   { limit = 0.9f; }
   float cut;
   cut = float_clip(cut_in,0.f,limit);
   float noise;
   uint8_t _cond_1;
   _cond_1 = bool_not(input_on);
   if(_cond_1){ noise = (Util_simple_noise(_ctx._inst0) * 0.001f); }
   else
   { noise = 0.f; }
   _tuple___real_real_real_real__ _call_0;
   Lateralus_process_heun(_ctx._inst1,(input + noise),cut,(res * 1.1f),db6_on,db12_on,db18_on,db24_on,_call_0);
   _output_ = _call_0;
   return ;
}

float Debriatus_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Debriatus_saturate_c0)[index] + (x * (float_wrap_array(Debriatus_saturate_c1)[index] + (float_wrap_array(Debriatus_saturate_c2)[index] * x))));
}

float Debriatus_factor(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Debriatus_factor_c0)[index] + (cv * (float_wrap_array(Debriatus_factor_c1)[index] + (float_wrap_array(Debriatus_factor_c2)[index] * cv))));
}

float Debriatus_crush(float i, float cv){
   float out;
   out = i;
   uint8_t _cond_0;
   _cond_0 = (cv == 0.f);
   if(_cond_0){
      out = i;
   }
   else
   {
      float b;
      b = Debriatus_factor(cv);
      int x;
      x = float_to_int((i * b));
      out = (int_to_float(x) / b);
   }
   return out;
}

float Debriatus_fold(float signal, float level){
   float sign;
   uint8_t _cond_0;
   _cond_0 = (signal > 0.f);
   if(_cond_0){ sign = 1.f; }
   else
   { sign = -1.f; }
   float amp;
   amp = (fabsf(signal) * ((8.f * level) + 1.f));
   float base;
   base = floorf(amp);
   float delta;
   delta = (amp + (- base));
   float out;
   uint8_t _cond_1;
   _cond_1 = ((float_to_int(base) % 2) != 0);
   if(_cond_1){ out = (1.f + (- delta)); }
   else
   { out = delta; }
   return (sign * out);
}

float Debriatus_process(float input, float fold, float crush, float distort, float saturate){
   float x;
   x = Debriatus_fold(input,fold);
   float y;
   y = Debriatus_crush(x,crush);
   float z;
   z = ((y * (1.f + (-2.f * distort))) + (y * y * y * distort * 8.f) + (- distort));
   float out;
   out = Debriatus_saturate((z * (1.f + (saturate * 8.f))));
   return out;
}

void VultEngine__ctx_type_0_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0 _ctx;
   Rescomb__ctx_type_2_init(_ctx.inst);
   _output_ = _ctx;
   return ;
}

void VultEngine_rescomb_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0_init(_output_);
   return ;
}

float VultEngine_rescomb(VultEngine__ctx_type_0 &_ctx, float in, float cv_in, float tone_in, float res_in){
   float i;
   i = float_clip(in,-10.f,10.f);
   float cv;
   cv = float_clip(cv_in,0.f,1.f);
   float tone;
   tone = float_clip(tone_in,-1.05f,1.05f);
   float res;
   res = float_clip(res_in,-1.1f,1.1f);
   return Rescomb_do(_ctx.inst,i,cv,tone,res);
}

void VultEngine__ctx_type_1_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1 _ctx;
   Stabile__ctx_type_8_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void VultEngine_stabile_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1_init(_output_);
   return ;
}

void VultEngine_stabile(VultEngine__ctx_type_1 &_ctx, float in, float cut_in, float res_in, float semblance_in, _tuple___real_real_real_real__ &_output_){
   float cut;
   cut = float_clip(cut_in,0.f,0.92f);
   float res;
   res = float_clip(res_in,0.f,4.f);
   float semblance;
   semblance = float_clip(semblance_in,0.f,1.f);
   _tuple___real_real_real_real__ _call_0;
   Stabile_process(_ctx._inst0,in,cut,res,semblance,_call_0);
   _output_ = _call_0;
   return ;
}

void VultEngine__ctx_type_2_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2 _ctx;
   Lateralus__ctx_type_10_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void VultEngine_lateralus_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2_init(_output_);
   return ;
}

void VultEngine_lateralus(VultEngine__ctx_type_2 &_ctx, float in, float cut, float res, uint8_t db6_on, uint8_t db12_on, uint8_t db18_on, uint8_t db24_on, uint8_t input_on, _tuple___real_real_real_real__ &_output_){
   _tuple___real_real_real_real__ _call_0;
   Lateralus_process(_ctx._inst0,in,cut,res,db6_on,db12_on,db18_on,db24_on,input_on,_call_0);
   _output_ = _call_0;
   return ;
}

void VultEngine__ctx_type_3_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3 _ctx;
   Tangents__ctx_type_11_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void VultEngine_tangents_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3_init(_output_);
   return ;
}

float VultEngine_tangents(VultEngine__ctx_type_3 &_ctx, float lp, float bp, float hp, float cut, float res, uint8_t lp_on, uint8_t bp_on, uint8_t hp_on){
   return Tangents_process(_ctx._inst0,lp,bp,hp,cut,res,lp_on,bp_on,hp_on);
}

float VultEngine_debriatus(float in, float fold_in, float crush_in, float distort_in, float saturate_in){
   float fold;
   fold = float_clip(fold_in,0.f,1.f);
   float crush;
   crush = float_clip(crush_in,0.f,1.f);
   float distort;
   distort = float_clip(distort_in,0.f,1.f);
   float saturate;
   saturate = float_clip(saturate_in,0.f,1.f);
   return Debriatus_process(in,fold,crush,distort,saturate);
}

void VultEngine__ctx_type_5_init(VultEngine__ctx_type_5 &_output_){
   VultEngine__ctx_type_5 _ctx;
   Trummor__ctx_type_0_init(_ctx.processor);
   _output_ = _ctx;
   return ;
}

void VultEngine_trummor_init(VultEngine__ctx_type_5 &_output_){
   VultEngine__ctx_type_5_init(_output_);
   return ;
}

void VultEngine_trummor(VultEngine__ctx_type_5 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   _tuple___real_real_real_real__ _call_0;
   Trummor_do(_ctx.processor,gate,osc_in,noise_in,_call_0);
   _output_ = _call_0;
   return ;
}

void VultEngine__ctx_type_6_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6 _ctx;
   Trummor2__ctx_type_4_init(_ctx.processor);
   _output_ = _ctx;
   return ;
}

void VultEngine_trummor2_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6_init(_output_);
   return ;
}

void VultEngine_trummor2(VultEngine__ctx_type_6 &_ctx, float gate, float osc_in, float noise_in, float osc_gate, float noise_gate, _tuple___real_real_real_real_real_real__ &_output_){
   _tuple___real_real_real_real_real_real__ _call_0;
   Trummor2_do(_ctx.processor,gate,osc_in,noise_in,osc_gate,noise_gate,_call_0);
   _output_ = _call_0;
   return ;
}

void VultEngine__ctx_type_7_init(VultEngine__ctx_type_7 &_output_){
   VultEngine__ctx_type_7 _ctx;
   Tohe__ctx_type_2_init(_ctx._inst0);
   _output_ = _ctx;
   return ;
}

void VultEngine_tohe_init(VultEngine__ctx_type_7 &_output_){
   VultEngine__ctx_type_7_init(_output_);
   return ;
}

float VultEngine_tohe(VultEngine__ctx_type_7 &_ctx, float x, float tone_in){
   float tone;
   tone = float_clip(tone_in,-1.f,1.f);
   return Tohe_do(_ctx._inst0,x,tone);
}


