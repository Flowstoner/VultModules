
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "VultEngine.h"

float Util_sampleRateScale(){
   return (44100.f / getSampleRate());
}

void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_3 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_39;
   _cond_39 = (x <= -0.666666666667f);
   if(_cond_39){
      return -1.f;
   }
   else
   {
      uint8_t _cond_38;
      _cond_38 = (x >= 0.666666666667f);
      if(_cond_38){
         return 1.f;
      }
      else
      {
         return (1.76086956522f * (x + (-0.333333333333f * x * x * x)));
      }
   }
}

float Util_stanh(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_stanh_c0)[index] + (x * (float_wrap_array(Util_stanh_c1)[index] + (float_wrap_array(Util_stanh_c2)[index] * x))));
}

float Util_sine(float x){
   int index;
   index = int_clip(float_to_int((100.f * x)),0,100);
   return (float_wrap_array(Util_sine_c0)[index] + (x * (float_wrap_array(Util_sine_c1)[index] + (float_wrap_array(Util_sine_c2)[index] * x))));
}

float Util_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_saturate_c0)[index] + (x * (float_wrap_array(Util_saturate_c1)[index] + (float_wrap_array(Util_saturate_c2)[index] * x))));
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_9_init(Util__ctx_type_9 &_output_){
   Util__ctx_type_9 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_9 &_output_){
   Util__ctx_type_9_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_9 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_10_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_10 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToperiodUnit(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiodUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToperiodUnit_c1)[index] + (float_wrap_array(Util_cvToperiodUnit_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

float Util_pitchToRateUnit(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRateUnit_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRateUnit_c1)[index] + (float_wrap_array(Util_pitchToRateUnit_c2)[index] * pitch))));
}

float Util_cvToRateUnit(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRateUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToRateUnit_c1)[index] + (float_wrap_array(Util_cvToRateUnit_c2)[index] * cv))));
}

void Util__ctx_type_16_init(Util__ctx_type_16 &_output_){
   Util__ctx_type_16 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_3_init(_ctx._inst21);
   Util__ctx_type_3_init(_ctx._inst20);
   _output_ = _ctx;
   return ;
}

void Util_pitchToRate_init(Util__ctx_type_16 &_output_){
   Util__ctx_type_16_init(_output_);
   return ;
}

float Util_pitchToRate(Util__ctx_type_16 &_ctx, float pitch){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_41;
   _cond_41 = (Util_change(_ctx._inst20,pitch) || Util_change(_ctx._inst21,fs));
   if(_cond_41){
      _ctx.rate = (Util_pitchToRateUnit(pitch) / getSampleRate());
   }
   return _ctx.rate;
}

void Util__ctx_type_17_init(Util__ctx_type_17 &_output_){
   Util__ctx_type_17 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_3_init(_ctx._inst25);
   Util__ctx_type_3_init(_ctx._inst24);
   _output_ = _ctx;
   return ;
}

void Util_cvToRate_init(Util__ctx_type_17 &_output_){
   Util__ctx_type_17_init(_output_);
   return ;
}

float Util_cvToRate(Util__ctx_type_17 &_ctx, float cv){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_42;
   _cond_42 = (Util_change(_ctx._inst24,cv) || Util_change(_ctx._inst25,fs));
   if(_cond_42){
      _ctx.rate = (Util_cvToRateUnit(cv) / fs);
   }
   return _ctx.rate;
}

void Util__ctx_type_18_init(Util__ctx_type_18 &_output_){
   Util__ctx_type_18 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Util_simple_noise_init(Util__ctx_type_18 &_output_){
   Util__ctx_type_18_init(_output_);
   return ;
}

float Util_simple_noise(Util__ctx_type_18 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

float Util_polylog(float x){
   float xx;
   xx = float_clip(x,0.f,1.f);
   return ((2.f + (- xx)) * xx);
}

float Util_shaper(float x){
   float pos;
   float sign;
   uint8_t _cond_43;
   _cond_43 = (x >= 0.f);
   if(_cond_43){
      pos = x;
      sign = 1.f;
   }
   else
   {
      pos = (- x);
      sign = -1.f;
   }
   float y;
   uint8_t _cond_44;
   _cond_44 = (pos < 1.f);
   if(_cond_44){ y = ((2.f + (- pos)) * pos); }
   else
   { y = 1.f; }
   return (y * sign);
}

float Util_fadeA(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeA_c0)[index] + (x * (float_wrap_array(Util_fadeA_c1)[index] + (float_wrap_array(Util_fadeA_c2)[index] * x))));
}

float Util_fadeB(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeB_c0)[index] + (x * (float_wrap_array(Util_fadeB_c1)[index] + (float_wrap_array(Util_fadeB_c2)[index] * x))));
}

void Util_fade(float x, _tuple___real_real__ &_output_){
   _tuple___real_real__ _tuple_45;
   {
      _tuple_45.field_0 = Util_fadeA(x);
      _tuple_45.field_1 = Util_fadeB(x);
   }
   _output_ = _tuple_45;
   return ;
}

void Util__ctx_type_24_init(Util__ctx_type_24 &_output_){
   Util__ctx_type_24 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder2_4x_init(Util__ctx_type_24 &_output_){
   Util__ctx_type_24_init(_output_);
   return ;
}

void Util_upsampleOrder2_4x(Util__ctx_type_24 &_ctx, float y0, _tuple___real_real_real__ &_output_){
   float p2;
   p2 = ((0.15625f * y0) + (0.9375f * _ctx.y1) + (-0.09375f * _ctx.y2));
   float p1;
   p1 = ((0.375f * y0) + (0.75f * _ctx.y1) + (-0.125f * _ctx.y2));
   float p0;
   p0 = ((0.65625f * y0) + (0.4375f * _ctx.y1) + (-0.09375f * _ctx.y2));
   float _tmp_47_0;
   _tmp_47_0 = _ctx.y1;
   float _tmp_47_1;
   _tmp_47_1 = y0;
   _ctx.y2 = _tmp_47_0;
   _ctx.y1 = _tmp_47_1;
   _tuple___real_real_real__ _tuple_48;
   {
      _tuple_48.field_0 = p2;
      _tuple_48.field_1 = p1;
      _tuple_48.field_2 = p0;
   }
   _output_ = _tuple_48;
   return ;
}

void Util__ctx_type_25_init(Util__ctx_type_25 &_output_){
   Util__ctx_type_25 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder2_2x_init(Util__ctx_type_25 &_output_){
   Util__ctx_type_25_init(_output_);
   return ;
}

float Util_upsampleOrder2_2x(Util__ctx_type_25 &_ctx, float y0){
   float p0;
   p0 = ((0.375f * y0) + (0.75f * _ctx.y1) + (-0.125f * _ctx.y2));
   float _tmp_50_0;
   _tmp_50_0 = _ctx.y1;
   float _tmp_50_1;
   _tmp_50_1 = y0;
   _ctx.y2 = _tmp_50_0;
   _ctx.y1 = _tmp_50_1;
   return p0;
}

void Util__ctx_type_26_init(Util__ctx_type_26 &_output_){
   Util__ctx_type_26 _ctx;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder1_4x_init(Util__ctx_type_26 &_output_){
   Util__ctx_type_26_init(_output_);
   return ;
}

void Util_upsampleOrder1_4x(Util__ctx_type_26 &_ctx, float y0, _tuple___real_real_real__ &_output_){
   float p2;
   p2 = ((y0 + (3.f * _ctx.y1)) * 0.25f);
   float p1;
   p1 = ((y0 + _ctx.y1) * 0.5f);
   float p0;
   p0 = (((3.f * y0) + _ctx.y1) * 0.25f);
   _ctx.y1 = y0;
   _tuple___real_real_real__ _tuple_51;
   {
      _tuple_51.field_0 = p2;
      _tuple_51.field_1 = p1;
      _tuple_51.field_2 = p0;
   }
   _output_ = _tuple_51;
   return ;
}

void Util__ctx_type_27_init(Util__ctx_type_27 &_output_){
   Util__ctx_type_27 _ctx;
   _ctx.y1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_upsampleOrder1_2x_init(Util__ctx_type_27 &_output_){
   Util__ctx_type_27_init(_output_);
   return ;
}

float Util_upsampleOrder1_2x(Util__ctx_type_27 &_ctx, float y0){
   float p0;
   p0 = ((y0 + _ctx.y1) * 0.5f);
   _ctx.y1 = y0;
   return p0;
}

float Util_cheby3(float x){
   return ((4.f * x * x * x) + (-3.f * x));
}

float Stabile_calc_g(float cv, float fs){
   float pitch;
   pitch = Util_cvToPitch(cv);
   float f;
   f = (8.17579891564f * expf((0.0577622650467f * pitch)));
   float wd;
   wd = (6.28318530718f * f);
   float T;
   T = (1.f / fs);
   float wa;
   wa = ((2.f / T) * tanf((wd * T * 0.5f)));
   float g;
   g = (wa * T * 0.5f);
   return g;
}

float Stabile_calc_g_44100(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_44100_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_44100_c1)[index] + (float_wrap_array(Stabile_calc_g_44100_c2)[index] * cv))));
}

float Stabile_calc_g_48000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_48000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_48000_c1)[index] + (float_wrap_array(Stabile_calc_g_48000_c2)[index] * cv))));
}

float Stabile_calc_g_88200(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_88200_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_88200_c1)[index] + (float_wrap_array(Stabile_calc_g_88200_c2)[index] * cv))));
}

float Stabile_calc_g_96000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_96000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_96000_c1)[index] + (float_wrap_array(Stabile_calc_g_96000_c2)[index] * cv))));
}

float Stabile_calc_g_176400(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_176400_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_176400_c1)[index] + (float_wrap_array(Stabile_calc_g_176400_c2)[index] * cv))));
}

float Stabile_calc_g_192000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_192000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_192000_c1)[index] + (float_wrap_array(Stabile_calc_g_192000_c2)[index] * cv))));
}

float Stabile_tune(float cv){
   float fs;
   fs = getSampleRate();
   float g;
   g = 0.f;
   uint8_t _cond_103;
   _cond_103 = (fs == 44100.f);
   if(_cond_103){
      g = Stabile_calc_g_44100(cv);
   }
   else
   {
      uint8_t _cond_102;
      _cond_102 = (fs == 48000.f);
      if(_cond_102){
         g = Stabile_calc_g_48000(cv);
      }
      else
      {
         uint8_t _cond_101;
         _cond_101 = (fs == 88200.f);
         if(_cond_101){
            g = Stabile_calc_g_88200(cv);
         }
         else
         {
            uint8_t _cond_100;
            _cond_100 = (fs == 96000.f);
            if(_cond_100){
               g = Stabile_calc_g_96000(cv);
            }
            else
            {
               uint8_t _cond_99;
               _cond_99 = (fs == 176400.f);
               if(_cond_99){
                  g = Stabile_calc_g_176400(cv);
               }
               else
               {
                  uint8_t _cond_98;
                  _cond_98 = (fs == 192000.f);
                  if(_cond_98){
                     g = Stabile_calc_g_192000(cv);
                  }
                  else
                  {
                     g = Stabile_calc_g(cv,getSampleRate());
                  }
               }
            }
         }
      }
   }
   return g;
}

void Stabile__ctx_type_8_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8 _ctx;
   _ctx.z2 = 0.f;
   _ctx.z1 = 0.f;
   _ctx.inv_den = 0.f;
   _ctx.g = 0.f;
   Util__ctx_type_3_init(_ctx._inst95);
   Util__ctx_type_3_init(_ctx._inst94);
   _ctx.R = 0.f;
   Stabile_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Stabile_process_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8_init(_output_);
   return ;
}

void Stabile_process(Stabile__ctx_type_8 &_ctx, float x, float cv, float q, float semblance, _tuple___real_real_real_real__ &_output_){
   q = (q + 0.5f);
   uint8_t _cond_104;
   _cond_104 = (Util_change(_ctx._inst94,cv) || Util_change(_ctx._inst95,q));
   if(_cond_104){
      _ctx.g = Stabile_tune(cv);
      _ctx.R = (1.f / (2.f * (q + 1e-18f)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = ((x + (- (((2.f * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   float band;
   band = ((_ctx.g * high) + _ctx.z1);
   float low;
   low = ((_ctx.g * band) + _ctx.z2);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   float sem;
   sem = ((Util_fadeA(semblance) * low) + (Util_fadeB(semblance) * high));
   _tuple___real_real_real_real__ _tuple_105;
   {
      _tuple_105.field_0 = low;
      _tuple_105.field_1 = band;
      _tuple_105.field_2 = high;
      _tuple_105.field_3 = sem;
   }
   _output_ = _tuple_105;
   return ;
}

void Stabile_default_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8_init(_output_);
   return ;
}

void Stabile_default(Stabile__ctx_type_8 &_ctx){
   _ctx.g = Stabile_calc_g(0.f,getSampleRate());
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst116);
   Util__ctx_type_2_init(_ctx._inst115);
   Util__ctx_type_17_init(_ctx._inst113);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable, _tuple___real_bool__ &_output_){
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   uint8_t _cond_122;
   _cond_122 = bool_not(_ctx.reset_state);
   if(_cond_122){
      _ctx.phase = (_ctx.phase + Util_cvToRate(_ctx._inst113,cv));
      uint8_t _cond_121;
      _cond_121 = (_ctx.phase > 1.f);
      if(_cond_121){
         _ctx.phase = (_ctx.phase + -1.f);
      }
   }
   float sine_out;
   sine_out = Util_sine(_ctx.phase);
   uint8_t _cond_123;
   _cond_123 = (Util_edge(_ctx._inst115,(reset > 0.f)) || Util_edge(_ctx._inst116,bdisable));
   if(_cond_123){
      _ctx.reset_phase = 1.f;
      _ctx.reset_state = 1;
   }
   float reset_out;
   reset_out = 1.f;
   if(_ctx.reset_state){
      uint8_t _cond_125;
      _cond_125 = (fabsf(_ctx.reset_phase) > 0.001f);
      if(_cond_125){
         float reset_speed;
         reset_speed = 0.01f;
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_124;
         _cond_124 = (_ctx.reset_phase > 0.001f);
         if(bool_not(_cond_124)){ _ctx.reset_phase = 0.f; }
         _ctx.reset_state = 0;
         _ctx.phase = 0.f;
      }
      reset_out = _ctx.reset_phase;
   }
   _tuple___real_bool__ _tuple_126;
   {
      _tuple_126.field_0 = (reset_out * sine_out);
      _tuple_126.field_1 = _ctx.reset_state;
   }
   _output_ = _tuple_126;
   return ;
}

float Tohe_tone_k1(float g){
   int index;
   index = int_clip(float_to_int((15.5f * (g + 1.f))),0,31);
   return (float_wrap_array(Tohe_tone_k1_c0)[index] + (g * (float_wrap_array(Tohe_tone_k1_c1)[index] + (float_wrap_array(Tohe_tone_k1_c2)[index] * g))));
}

float Tohe_tone_k0(float g){
   int index;
   index = int_clip(float_to_int((15.5f * (g + 1.f))),0,31);
   return (float_wrap_array(Tohe_tone_k0_c0)[index] + (g * (float_wrap_array(Tohe_tone_k0_c1)[index] + (float_wrap_array(Tohe_tone_k0_c2)[index] * g))));
}

void Tohe__ctx_type_2_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2 _ctx;
   _ctx.w1 = 0.f;
   _ctx.k1 = 0.f;
   _ctx.k0 = 0.f;
   _ctx.comp = 0.f;
   Util__ctx_type_3_init(_ctx._inst133);
   Tohe_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Tohe_do_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2_init(_output_);
   return ;
}

float Tohe_do(Tohe__ctx_type_2 &_ctx, float x, float gain){
   uint8_t _cond_136;
   _cond_136 = Util_change(_ctx._inst133,gain);
   if(_cond_136){
      _ctx.k1 = Tohe_tone_k1(gain);
      _ctx.k0 = Tohe_tone_k0(gain);
      _ctx.comp = Util_map(fabsf(gain),0.f,1.f,1.f,1.8f);
   }
   float w0;
   w0 = (x + (- (_ctx.k0 * _ctx.w1)));
   float y0;
   y0 = ((_ctx.k0 * w0) + _ctx.w1);
   _ctx.w1 = w0;
   float sign;
   uint8_t _cond_137;
   _cond_137 = (gain < 0.f);
   if(_cond_137){ sign = -1.f; }
   else
   { sign = 1.f; }
   return (((_ctx.k1 * (x + (sign * y0)) * 0.5f) + x) * _ctx.comp);
}

void Tohe_start_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2_init(_output_);
   return ;
}

void Tohe_start(Tohe__ctx_type_2 &_ctx){
   _ctx.k1 = 0.f;
   _ctx.k0 = -0.852723285867f;
   _ctx.comp = 1.f;
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   Util__ctx_type_2_init(_ctx._inst139);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   uint8_t bgate;
   bgate = (gate > 0.5f);
   float g;
   g = (1.f + (- Util_polylog((0.5f + (rate * 0.5f)))));
   _ctx.out = (_ctx.out + ((end + (- _ctx.out)) * g * 0.004f * Util_sampleRateScale()));
   uint8_t _cond_145;
   _cond_145 = Util_edge(_ctx._inst139,bgate);
   if(_cond_145){
      _ctx.out = start;
   }
   return _ctx.out;
}

void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_default(Swept__ctx_type_0 &_ctx){
}

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Noise_syncronized_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_syncronized(Noise__ctx_type_0 &_ctx, uint8_t gate){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   float y2;
   y2 = (int_to_float(_ctx.x2) * 3.0517578125e-05f);
   float out;
   out = (y1 + (- y2));
   if(gate){
      _ctx.x1 = 0;
      _ctx.x2 = 0;
   }
   return out;
}

void Decimate__ctx_type_0_init(Decimate__ctx_type_0 &_output_){
   Decimate__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Decimate_decimate_init(Decimate__ctx_type_0 &_output_){
   Decimate__ctx_type_0_init(_output_);
   return ;
}

float Decimate_decimate(Decimate__ctx_type_0 &_ctx, float in, float factor){
   int n;
   n = float_to_int((127.f * factor));
   n = int_clip(n,0,127);
   _ctx.count = (_ctx.count + 1);
   uint8_t _cond_150;
   _cond_150 = (_ctx.count > n);
   if(_cond_150){
      _ctx.count = 0;
      _ctx.out = in;
   }
   return _ctx.out;
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst158);
   Util__ctx_type_2_init(_ctx._inst152);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r, uint8_t enabled, _tuple___real_real__ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.f);
   uint8_t _cond_162;
   _cond_162 = Util_edge(_ctx._inst152,bgate);
   if(_cond_162){
      _ctx.state = reset;
   }
   float resetting;
   uint8_t _cond_171;
   _cond_171 = (_ctx.state == reset);
   if(_cond_171){ resetting = 1.f; }
   else
   { resetting = 0.f; }
   uint8_t _cond_163;
   _cond_163 = (_ctx.state == reset);
   if(_cond_163){
      _ctx.rate = 1.81818181818f;
      _ctx.target = 0.f;
   }
   uint8_t _cond_164;
   _cond_164 = ((_ctx.state == attack) && enabled);
   if(_cond_164){
      _ctx.rate = (1.f / ((100.f * a) + 0.1f));
      _ctx.target = 1228.8f;
   }
   uint8_t _cond_165;
   _cond_165 = (_ctx.state == hold);
   if(_cond_165){
      float hrate;
      hrate = (1.f / ((100.f * h) + 0.05f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_166;
   _cond_166 = (_ctx.state == release);
   if(_cond_166){
      _ctx.rate = (1.f / ((200.f * r) + 0.05f));
      _ctx.target = 0.f;
   }
   uint8_t _cond_167;
   _cond_167 = Util_edge(_ctx._inst158,(_ctx.out > 1024.f));
   if(_cond_167){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   uint8_t _cond_168;
   _cond_168 = ((_ctx.out < 10.f) && (_ctx.state == reset));
   if(_cond_168){
      _ctx.state = attack;
   }
   uint8_t _cond_169;
   _cond_169 = ((_ctx.hold_phase > 100.f) && (_ctx.state == hold));
   if(_cond_169){
      _ctx.state = release;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f * Util_sampleRateScale()));
   _tuple___real_real__ _tuple_170;
   {
      _tuple_170.field_0 = float_clip((_ctx.out * 0.0009765625f),0.f,1.f);
      _tuple_170.field_1 = resetting;
   }
   _output_ = _tuple_170;
   return ;
}

void Trummor__ctx_type_0_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0 _ctx;
   _ctx.tone = 0.f;
   _ctx.pitch = 0.f;
   _ctx.level2 = 0.f;
   _ctx.level1 = 0.f;
   _ctx.int_osc = 0.f;
   _ctx.int_noise = 0.f;
   _ctx.ext_osc = 0.f;
   _ctx.ext_noise = 0.f;
   _ctx.env_enabled = 0;
   _ctx.env2_scale = 0.f;
   _ctx.env2_r = 0.f;
   _ctx.env2_h = 0.f;
   _ctx.env2_a = 0.f;
   _ctx.env1_scale = 0.f;
   _ctx.env1_r = 0.f;
   _ctx.env1_h = 0.f;
   _ctx.env1_a = 0.f;
   _ctx.drive = 0.f;
   _ctx.decimate = 0.f;
   _ctx.bend = 0.f;
   Tohe__ctx_type_2_init(_ctx._inst185);
   Decimate__ctx_type_0_init(_ctx._inst184);
   Noise__ctx_type_0_init(_ctx._inst183);
   Util__ctx_type_2_init(_ctx._inst182);
   Ahr__ctx_type_0_init(_ctx._inst181);
   Tricore__ctx_type_0_init(_ctx._inst180);
   Swept__ctx_type_0_init(_ctx._inst179);
   Ahr__ctx_type_0_init(_ctx._inst178);
   _output_ = _ctx;
   return ;
}

void Trummor_do_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_do(Trummor__ctx_type_0 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   float osc_env;
   float env_reset;
   _tuple___real_real__ _call_203;
   Ahr_do(_ctx._inst178,gate,(_ctx.env1_scale * _ctx.env1_a),(_ctx.env1_scale * _ctx.env1_h),(_ctx.env1_scale * _ctx.env1_r),_ctx.env_enabled,_call_203);
   osc_env = _call_203.field_0;env_reset = _call_203.field_1;
   float cv;
   cv = Swept_process(_ctx._inst179,(1.f + (- env_reset)),(_ctx.pitch + (_ctx.bend * 0.4f)),_ctx.pitch,0.1f);
   float osc;
   uint8_t reset_osc;
   _tuple___real_bool__ _call_204;
   Tricore_process(_ctx._inst180,cv,0.f,env_reset,_call_204);
   osc = _call_204.field_0;reset_osc = _call_204.field_1;
   osc = ((_ctx.int_osc * osc) + (_ctx.ext_osc * osc_in));
   _ctx.env_enabled = bool_not(reset_osc);
   float osc_sat;
   osc_sat = Util_saturate(((_ctx.drive + 1.f) * osc));
   float noise_env;
   _tuple___real_real__ _call_205;
   Ahr_do(_ctx._inst181,gate,(_ctx.env2_scale * _ctx.env2_a),(_ctx.env2_scale * _ctx.env2_h),(_ctx.env2_scale * _ctx.env2_r),_ctx.env_enabled,_call_205);
   noise_env = _call_205.field_0;
   float noise_osc;
   uint8_t _cond_210;
   _cond_210 = (_ctx.decimate == 0.f);
   if(_cond_210){ noise_osc = ((_ctx.int_noise * (float_random() + -0.5f)) + (_ctx.ext_noise * noise_in)); }
   else
   { noise_osc = Decimate_decimate(_ctx._inst184,((_ctx.int_noise * Noise_syncronized(_ctx._inst183,Util_edge(_ctx._inst182,(gate > 0.1f)))) + (_ctx.ext_noise * noise_in)),_ctx.decimate); }
   noise_osc = Tohe_do(_ctx._inst185,noise_osc,_ctx.tone);
   float output;
   output = ((_ctx.level1 * osc_env * osc_sat) + (_ctx.level2 * noise_env * noise_osc));
   _tuple___real_real_real_real__ _tuple_206;
   {
      _tuple_206.field_0 = output;
      _tuple_206.field_1 = cv;
      _tuple_206.field_2 = osc_env;
      _tuple_206.field_3 = noise_env;
   }
   _output_ = _tuple_206;
   return ;
}

void Trummor_setLevel1_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setLevel1(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.level1 = float_clip(value,0.f,1.f);
}

void Trummor_setLevel2_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setLevel2(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.level2 = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1A_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1A(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_a = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1H_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1H(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_h = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1R_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1R(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_r = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2A_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2A(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_a = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2H_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2H(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_h = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2R_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2R(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_r = float_clip(value,0.f,1.f);
}

void Trummor_setPitch_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setPitch(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.pitch = float_clip(value,-1.f,1.f);
}

void Trummor_setBend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setBend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.bend = float_clip(value,-1.f,1.f);
}

void Trummor_setDrive_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setDrive(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.drive = float_clip(value,0.f,1.f);
}

void Trummor_setTone_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setTone(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.tone = float_clip(value,-1.f,1.f);
}

void Trummor_setOscBlend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setOscBlend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.int_osc = Util_fadeA(value);
   _ctx.ext_osc = Util_fadeB(value);
}

void Trummor_setNoiseBlend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setNoiseBlend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.int_noise = Util_fadeA(value);
   _ctx.ext_noise = Util_fadeB(value);
}

void Trummor_setEnv1Scale_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1Scale(Trummor__ctx_type_0 &_ctx, float value){
   uint8_t _cond_212;
   _cond_212 = (value < 0.5f);
   if(_cond_212){ _ctx.env1_scale = 1.f; }
   else
   { _ctx.env1_scale = 0.2f; }
}

void Trummor_setEnv2Scale_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2Scale(Trummor__ctx_type_0 &_ctx, float value){
   uint8_t _cond_213;
   _cond_213 = (value < 0.5f);
   if(_cond_213){ _ctx.env2_scale = 1.f; }
   else
   { _ctx.env2_scale = 0.2f; }
}

void Trummor_setDecimate_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setDecimate(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.decimate = float_clip(value,0.f,1.f);
}

float Tangents_tune(float cut, float fs, float oversampling){
   float f;
   f = Util_cvTokHz(cut);
   float fh;
   fh = ((6.28318530718f * f) / (oversampling * fs));
   return fh;
}

float Tangents_tune_44100(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_44100_c0)[index] + (cut * (float_wrap_array(Tangents_tune_44100_c1)[index] + (float_wrap_array(Tangents_tune_44100_c2)[index] * cut))));
}

float Tangents_tune_48000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_48000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_48000_c1)[index] + (float_wrap_array(Tangents_tune_48000_c2)[index] * cut))));
}

float Tangents_tune_88200(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_88200_c0)[index] + (cut * (float_wrap_array(Tangents_tune_88200_c1)[index] + (float_wrap_array(Tangents_tune_88200_c2)[index] * cut))));
}

float Tangents_tune_96000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_96000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_96000_c1)[index] + (float_wrap_array(Tangents_tune_96000_c2)[index] * cut))));
}

float Tangents_tune_176400(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_176400_c0)[index] + (cut * (float_wrap_array(Tangents_tune_176400_c1)[index] + (float_wrap_array(Tangents_tune_176400_c2)[index] * cut))));
}

float Tangents_tune_192000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_192000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_192000_c1)[index] + (float_wrap_array(Tangents_tune_192000_c2)[index] * cut))));
}

float Tangents_getTune(float cut, float fs){
   uint8_t _cond_266;
   _cond_266 = (fs == 44100.f);
   if(_cond_266){
      return Tangents_tune_44100(cut);
   }
   else
   {
      uint8_t _cond_265;
      _cond_265 = (fs == 48000.f);
      if(_cond_265){
         return Tangents_tune_48000(cut);
      }
      else
      {
         uint8_t _cond_264;
         _cond_264 = (fs == 88200.f);
         if(_cond_264){
            return Tangents_tune_88200(cut);
         }
         else
         {
            uint8_t _cond_263;
            _cond_263 = (fs == 96000.f);
            if(_cond_263){
               return Tangents_tune_96000(cut);
            }
            else
            {
               uint8_t _cond_262;
               _cond_262 = (fs == 176400.f);
               if(_cond_262){
                  return Tangents_tune_176400(cut);
               }
               else
               {
                  uint8_t _cond_261;
                  _cond_261 = (fs == 192000.f);
                  if(_cond_261){
                     return Tangents_tune_192000(cut);
                  }
                  else
                  {
                     return Tangents_tune(cut,fs,4.f);
                  }
               }
            }
         }
      }
   }
}

void Tangents__ctx_type_8_init(Tangents__ctx_type_8 &_output_){
   Tangents__ctx_type_8 _ctx;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Tangents_heun_init(Tangents__ctx_type_8 &_output_){
   Tangents__ctx_type_8_init(_output_);
   return ;
}

float Tangents_heun(Tangents__ctx_type_8 &_ctx, float lp, float bp, float hp, float wh, float cut, float res){
   float resfactor;
   resfactor = 2.f;
   float yt;
   yt = Util_cubic_clipper((hp + _ctx.p0));
   float feedt;
   feedt = (resfactor * res * yt);
   float dpt0;
   dpt0 = ((bp + (- hp) + feedt + (- _ctx.p0) + _ctx.p1) * wh);
   float dpt1;
   dpt1 = (((-2.f * bp) + hp + lp + (-2.f * feedt) + _ctx.p0 + (-2.f * _ctx.p1)) * wh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float yn;
   yn = Util_cubic_clipper((hp + pt0));
   float feed;
   feed = (resfactor * res * yn);
   float dp0;
   dp0 = ((bp + (- hp) + feed + (- pt0) + pt1) * wh);
   float dp1;
   dp1 = (((-2.f * bp) + hp + lp + (-2.f * feed) + pt0 + (-2.f * pt1)) * wh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   return Util_cubic_clipper((hp + _ctx.p0));
}

void Tangents__ctx_type_9_init(Tangents__ctx_type_9 &_output_){
   Tangents__ctx_type_9 _ctx;
   Tangents__ctx_type_8_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_26_init(_ctx._inst256);
   Util__ctx_type_26_init(_ctx._inst255);
   Util__ctx_type_26_init(_ctx._inst254);
   Util__ctx_type_27_init(_ctx._inst252);
   Util__ctx_type_27_init(_ctx._inst251);
   Util__ctx_type_27_init(_ctx._inst250);
   Util__ctx_type_3_init(_ctx._inst245);
   Util__ctx_type_3_init(_ctx._inst244);
   _output_ = _ctx;
   return ;
}

void Tangents_process_heun_init(Tangents__ctx_type_9 &_output_){
   Tangents__ctx_type_9_init(_output_);
   return ;
}

float Tangents_process_heun(Tangents__ctx_type_9 &_ctx, float lp, float bp, float hp, float cut, float res){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_267;
   _cond_267 = (Util_change(_ctx._inst244,cut) || Util_change(_ctx._inst245,fs));
   if(_cond_267){
      _ctx.fh = Tangents_getTune(cut,fs);
   }
   float out;
   out = 0.f;
   uint8_t _cond_275;
   _cond_275 = ((fs == 176400.f) || (fs == 192000.f));
   if(_cond_275){
      out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
   }
   else
   {
      uint8_t _cond_274;
      _cond_274 = ((fs == 88200.f) || (fs == 96000.f));
      if(_cond_274){
         float lp1;
         lp1 = Util_upsampleOrder1_2x(_ctx._inst250,lp);
         float bp1;
         bp1 = Util_upsampleOrder1_2x(_ctx._inst251,bp);
         float hp1;
         hp1 = Util_upsampleOrder1_2x(_ctx._inst252,hp);
         out = Tangents_heun(_ctx.h,lp1,bp1,hp1,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
      }
      else
      {
         float lp3;
         float lp2;
         float lp1;
         _tuple___real_real_real__ _call_268;
         Util_upsampleOrder1_4x(_ctx._inst254,lp,_call_268);
         lp3 = _call_268.field_0;lp2 = _call_268.field_1;lp1 = _call_268.field_2;
         float bp3;
         float bp2;
         float bp1;
         _tuple___real_real_real__ _call_269;
         Util_upsampleOrder1_4x(_ctx._inst255,bp,_call_269);
         bp3 = _call_269.field_0;bp2 = _call_269.field_1;bp1 = _call_269.field_2;
         float hp3;
         float hp2;
         float hp1;
         _tuple___real_real_real__ _call_270;
         Util_upsampleOrder1_4x(_ctx._inst256,bp,_call_270);
         hp3 = _call_270.field_0;hp2 = _call_270.field_1;hp1 = _call_270.field_2;
         out = Tangents_heun(_ctx.h,lp3,bp3,hp3,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp2,bp2,hp2,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp1,bp1,hp1,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
      }
   }
   return out;
}

void Tangents__ctx_type_10_init(Tangents__ctx_type_10 &_output_){
   Tangents__ctx_type_10 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Tangents_simple_noise_init(Tangents__ctx_type_10 &_output_){
   Tangents__ctx_type_10_init(_output_);
   return ;
}

float Tangents_simple_noise(Tangents__ctx_type_10 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

void Tangents__ctx_type_11_init(Tangents__ctx_type_11 &_output_){
   Tangents__ctx_type_11 _ctx;
   Tangents__ctx_type_9_init(_ctx._inst260);
   Util__ctx_type_18_init(_ctx._inst259);
   _output_ = _ctx;
   return ;
}

void Tangents_process_init(Tangents__ctx_type_11 &_output_){
   Tangents__ctx_type_11_init(_output_);
   return ;
}

float Tangents_process(Tangents__ctx_type_11 &_ctx, float lp, float bp, float hp, float cut_in, float res_in){
   float res;
   res = Util_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.f,0.25f);
   float limit;
   uint8_t _cond_276;
   _cond_276 = (comp > 0.f);
   if(_cond_276){ limit = (0.9f + (- comp)); }
   else
   { limit = 0.88f; }
   float cut;
   cut = float_clip(cut_in,0.f,limit);
   float noise;
   noise = (Util_simple_noise(_ctx._inst259) * 0.001f);
   return Tangents_process_heun(_ctx._inst260,(lp + noise),bp,hp,cut,res);
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(3000,0.f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0_init(_output_);
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((_ctx.write_pos + 1) % 3000);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 3000.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- (Util_cvToperiodUnit(cv) * getSampleRate()))),r_size);
   uint8_t _cond_302;
   _cond_302 = (r_index < 0.f);
   if(_cond_302){ r_index = (r_size + r_index); }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 3000);
   int t2;
   t2 = ((t1 + 1) % 3000);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   return ret;
}

float Rescomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.25f * (tone + 1.2f))),0,63);
   return (float_wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Rescomb_toneCurve_c1)[index] + (float_wrap_array(Rescomb_toneCurve_c2)[index] * tone))));
}

void Rescomb__ctx_type_2_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2 _ctx;
   _ctx.stone = 0.f;
   _ctx.output = 0.f;
   Rescomb__ctx_type_0_init(_ctx._inst301);
   Util__ctx_type_9_init(_ctx._inst300);
   Util__ctx_type_3_init(_ctx._inst298);
   _output_ = _ctx;
   return ;
}

void Rescomb_do_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2_init(_output_);
   return ;
}

float Rescomb_do(Rescomb__ctx_type_2 &_ctx, float in, float cv, float tone, float res){
   uint8_t _cond_304;
   _cond_304 = Util_change(_ctx._inst298,tone);
   if(_cond_304){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst300,(_ctx.output * res));
   float saturated_input;
   saturated_input = Util_stanh((in + feedback));
   _ctx.output = ((_ctx.stone * Rescomb_delay(_ctx._inst301,saturated_input,cv)) + in);
   return Util_stanh(_ctx.output);
}

float Trummor2_shape(float x, float shaper, float sub){
   float out;
   out = 0.f;
   uint8_t _cond_345;
   _cond_345 = (shaper < 0.f);
   if(_cond_345){
      float comp;
      comp = Util_map(sub,0.f,1.f,1.f,0.7f);
      float xx;
      xx = (comp * x);
      out = Util_shaper(((xx * Util_fadeA((- shaper))) + (Util_cheby3(xx) * Util_fadeB((- shaper)))));
   }
   else
   {
      out = Util_shaper(((shaper + 1.f) * x));
   }
   return out;
}

void Trummor2__ctx_type_1_init(Trummor2__ctx_type_1 &_output_){
   Trummor2__ctx_type_1 _ctx;
   Stabile__ctx_type_8_init(_ctx._inst309);
   _output_ = _ctx;
   return ;
}

void Trummor2_filterS_init(Trummor2__ctx_type_1 &_output_){
   Trummor2__ctx_type_1_init(_output_);
   return ;
}

float Trummor2_filterS(Trummor2__ctx_type_1 &_ctx, float x, float cutoff, float resonance, float filter_type){
   float out;
   float low;
   float band;
   float high;
   _tuple___real_real_real_real__ _call_346;
   Stabile_process(_ctx._inst309,x,float_clip(cutoff,0.f,0.92f),(40.f * resonance),0.f,_call_346);
   low = _call_346.field_0;band = _call_346.field_1;high = _call_346.field_2;
   uint8_t _cond_348;
   _cond_348 = (filter_type < 1.f);
   if(_cond_348){ out = low; }
   else
   {
      uint8_t _cond_374;
      _cond_374 = (filter_type < 2.f);
      if(_cond_374){ out = band; }
      else
      { out = high; }
   }
   return out;
}

void Trummor2__ctx_type_2_init(Trummor2__ctx_type_2 &_output_){
   Trummor2__ctx_type_2 _ctx;
   Tangents__ctx_type_11_init(_ctx._inst311);
   _output_ = _ctx;
   return ;
}

void Trummor2_filterP_init(Trummor2__ctx_type_2 &_output_){
   Trummor2__ctx_type_2_init(_output_);
   return ;
}

float Trummor2_filterP(Trummor2__ctx_type_2 &_ctx, float x, float cutoff, float resonance, float filter_type){
   float lp;
   float bp;
   float hp;
   uint8_t _cond_349;
   _cond_349 = (filter_type < 1.f);
   if(_cond_349){
      lp = x;
      bp = 0.f;
      hp = 0.f;
   }
   else
   {
      uint8_t _cond_378;
      _cond_378 = (filter_type < 2.f);
      if(_cond_378){
         lp = 0.f;
         bp = x;
         hp = 0.f;
      }
      else
      {
         lp = 0.f;
         bp = 0.f;
         hp = x;
      }
   }
   return Tangents_process(_ctx._inst311,lp,bp,hp,cutoff,(0.6f * Util_polylog(resonance)));
}

void Trummor2__ctx_type_3_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3 _ctx;
   _ctx.tone = 0.f;
   _ctx.sub = 0.f;
   _ctx.shaper = 0.f;
   _ctx.ring_sel = 0;
   _ctx.resonance = 0.f;
   _ctx.rescomb = 0.f;
   _ctx.pitch = 0.f;
   _ctx.noise_tune = 0.f;
   _ctx.level2 = 0.f;
   _ctx.level1 = 0.f;
   _ctx.int_osc = 0.f;
   _ctx.int_noise = 0.f;
   _ctx.filter = 0.f;
   _ctx.ext_osc = 0.f;
   _ctx.ext_noise = 0.f;
   _ctx.env_enabled = 0;
   _ctx.env2_r = 0.f;
   _ctx.env2_mode = 0;
   _ctx.env2_h = 0.f;
   _ctx.env2_a = 0.f;
   _ctx.env1_r = 0.f;
   _ctx.env1_mode = 0;
   _ctx.env1_h = 0.f;
   _ctx.env1_a = 0.f;
   _ctx.cutoff = 0.f;
   _ctx.bend_time = 0.f;
   _ctx.bend = 0.f;
   Rescomb__ctx_type_2_init(_ctx._inst320);
   Trummor2__ctx_type_2_init(_ctx._inst319);
   Tohe__ctx_type_2_init(_ctx._inst318);
   Ahr__ctx_type_0_init(_ctx._inst317);
   Tricore__ctx_type_0_init(_ctx._inst316);
   Tricore__ctx_type_0_init(_ctx._inst315);
   Swept__ctx_type_0_init(_ctx._inst314);
   Ahr__ctx_type_0_init(_ctx._inst313);
   _output_ = _ctx;
   return ;
}

void Trummor2_do_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_do(Trummor2__ctx_type_3 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   float env1_scale;
   if(_ctx.env1_mode){ env1_scale = 1.f; }
   else
   { env1_scale = 0.2f; }
   float osc_env;
   float env_reset;
   _tuple___real_real__ _call_350;
   Ahr_do(_ctx._inst313,gate,(env1_scale * _ctx.env1_a),(env1_scale * _ctx.env1_h),(env1_scale * _ctx.env1_r),_ctx.env_enabled,_call_350);
   osc_env = _call_350.field_0;env_reset = _call_350.field_1;
   if(bool_not(_ctx.env1_mode)){ osc_env = Util_shaper(osc_env); }
   float swept;
   swept = Swept_process(_ctx._inst314,(1.f + (- env_reset)),(_ctx.bend * 0.6f),0.f,_ctx.bend_time);
   float cv;
   cv = (_ctx.pitch + swept);
   float sub_osc;
   uint8_t reset_sub;
   _tuple___real_bool__ _call_351;
   Tricore_process(_ctx._inst315,(cv + -0.1f + (_ctx.sub * 0.001f)),0.f,env_reset,_call_351);
   sub_osc = _call_351.field_0;reset_sub = _call_351.field_1;
   float osc;
   uint8_t reset_osc;
   _tuple___real_bool__ _call_352;
   Tricore_process(_ctx._inst316,cv,0.f,env_reset,_call_352);
   osc = _call_352.field_0;reset_osc = _call_352.field_1;
   osc = ((_ctx.sub * sub_osc) + osc);
   osc = ((_ctx.int_osc * osc) + (_ctx.ext_osc * osc_in));
   osc = Trummor2_shape(osc,_ctx.shaper,_ctx.sub);
   _ctx.env_enabled = (bool_not(reset_sub) && bool_not(reset_osc));
   float env2_scale;
   if(_ctx.env2_mode){ env2_scale = 1.f; }
   else
   { env2_scale = 0.2f; }
   float noise_env;
   _tuple___real_real__ _call_353;
   Ahr_do(_ctx._inst317,gate,(env2_scale * _ctx.env2_a),(env2_scale * _ctx.env2_h),(env2_scale * _ctx.env2_r),_ctx.env_enabled,_call_353);
   noise_env = _call_353.field_0;
   if(bool_not(_ctx.env2_mode)){ noise_env = Util_shaper(noise_env); }
   float noise_osc;
   noise_osc = (float_random() + -0.5f + (_ctx.ext_noise * noise_in));
   noise_osc = Tohe_do(_ctx._inst318,noise_osc,_ctx.tone);
   float filter_output;
   filter_output = Trummor2_filterP(_ctx._inst319,(noise_osc * noise_env),_ctx.cutoff,_ctx.resonance,_ctx.filter);
   float comb;
   comb = float_clip((9.f * _ctx.noise_tune * _ctx.noise_tune),0.f,1.f);
   filter_output = Rescomb_do(_ctx._inst320,filter_output,(1.f + (- _ctx.noise_tune)),comb,_ctx.rescomb);
   float output;
   output = ((_ctx.level1 * osc_env * osc) + (0.6f * _ctx.level2 * filter_output));
   _tuple___real_real_real_real__ _tuple_354;
   {
      _tuple_354.field_0 = output;
      _tuple_354.field_1 = cv;
      _tuple_354.field_2 = osc_env;
      _tuple_354.field_3 = noise_env;
   }
   _output_ = _tuple_354;
   return ;
}

void Trummor2_setLevel1_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setLevel1(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.level1 = float_clip(value,0.f,1.f);
}

void Trummor2_setLevel2_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setLevel2(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.level2 = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv1A_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv1A(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env1_a = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv1H_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv1H(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env1_h = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv1R_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv1R(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env1_r = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv2A_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv2A(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env2_a = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv2H_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv2H(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env2_h = float_clip(value,0.f,1.f);
}

void Trummor2_setEnv2R_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv2R(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env2_r = float_clip(value,0.f,1.f);
}

void Trummor2_setPitch_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setPitch(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.pitch = float_clip(value,-1.f,1.f);
}

void Trummor2_setBend_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setBend(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.bend = float_clip(value,-1.f,1.f);
}

void Trummor2_setShaper_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setShaper(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.shaper = float_clip(value,-1.f,1.f);
}

void Trummor2_setNoiseTune_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setNoiseTune(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.noise_tune = float_clip(value,0.f,1.f);
}

void Trummor2_setRescomb_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setRescomb(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.rescomb = float_clip(value,0.f,1.f);
}

void Trummor2_setTone_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setTone(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.tone = float_clip(value,-1.f,1.f);
}

void Trummor2_setOscBlend_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setOscBlend(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.int_osc = Util_fadeA(value);
   _ctx.ext_osc = Util_fadeB(value);
}

void Trummor2_setNoiseBlend_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setNoiseBlend(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.int_noise = Util_fadeA(value);
   _ctx.ext_noise = Util_fadeB(value);
}

void Trummor2_setEnv1Scale_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv1Scale(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env1_mode = (value < 0.5f);
}

void Trummor2_setEnv2Scale_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setEnv2Scale(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.env2_mode = (value < 0.5f);
}

void Trummor2_setRingSel_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setRingSel(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.ring_sel = (value > 0.5f);
}

void Trummor2_setBendTime_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setBendTime(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.bend_time = value;
}

void Trummor2_setSub_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setSub(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.sub = float_clip(value,0.f,1.f);
}

void Trummor2_setCutoff_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setCutoff(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.cutoff = float_clip(value,0.f,0.92f);
}

void Trummor2_setResonance_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setResonance(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.resonance = float_clip(value,0.f,1.f);
}

void Trummor2_setFilter_init(Trummor2__ctx_type_3 &_output_){
   Trummor2__ctx_type_3_init(_output_);
   return ;
}

void Trummor2_setFilter(Trummor2__ctx_type_3 &_ctx, float value){
   _ctx.filter = float_clip(value,0.f,2.f);
}

float Lateralus_tune(float cut, float fs, float oversampling){
   float f;
   f = Util_cvTokHz(cut);
   float fh;
   fh = ((6.28318530718f * f) / (oversampling * fs));
   return fh;
}

float Lateralus_tune_44100(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_44100_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_44100_c1)[index] + (float_wrap_array(Lateralus_tune_44100_c2)[index] * cut))));
}

float Lateralus_tune_48000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_48000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_48000_c1)[index] + (float_wrap_array(Lateralus_tune_48000_c2)[index] * cut))));
}

float Lateralus_tune_88200(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_88200_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_88200_c1)[index] + (float_wrap_array(Lateralus_tune_88200_c2)[index] * cut))));
}

float Lateralus_tune_96000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_96000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_96000_c1)[index] + (float_wrap_array(Lateralus_tune_96000_c2)[index] * cut))));
}

float Lateralus_tune_176400(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_176400_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_176400_c1)[index] + (float_wrap_array(Lateralus_tune_176400_c2)[index] * cut))));
}

float Lateralus_tune_192000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_192000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_192000_c1)[index] + (float_wrap_array(Lateralus_tune_192000_c2)[index] * cut))));
}

float Lateralus_getTune(float cut, float fs){
   uint8_t _cond_440;
   _cond_440 = (fs == 44100.f);
   if(_cond_440){
      return Lateralus_tune_44100(cut);
   }
   else
   {
      uint8_t _cond_439;
      _cond_439 = (fs == 48000.f);
      if(_cond_439){
         return Lateralus_tune_48000(cut);
      }
      else
      {
         uint8_t _cond_438;
         _cond_438 = (fs == 88200.f);
         if(_cond_438){
            return Lateralus_tune_88200(cut);
         }
         else
         {
            uint8_t _cond_437;
            _cond_437 = (fs == 96000.f);
            if(_cond_437){
               return Lateralus_tune_96000(cut);
            }
            else
            {
               uint8_t _cond_436;
               _cond_436 = (fs == 176400.f);
               if(_cond_436){
                  return Lateralus_tune_176400(cut);
               }
               else
               {
                  uint8_t _cond_435;
                  _cond_435 = (fs == 192000.f);
                  if(_cond_435){
                     return Lateralus_tune_192000(cut);
                  }
                  else
                  {
                     return Lateralus_tune(cut,fs,4.f);
                  }
               }
            }
         }
      }
   }
}

void Lateralus__ctx_type_8_init(Lateralus__ctx_type_8 &_output_){
   Lateralus__ctx_type_8 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Lateralus_heun_init(Lateralus__ctx_type_8 &_output_){
   Lateralus__ctx_type_8_init(_output_);
   return ;
}

void Lateralus_heun(Lateralus__ctx_type_8 &_ctx, float input, float fh, float res, _tuple___real_real__ &_output_){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * res * _ctx.p3)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = ((wt0 + (- wt1)) * fh);
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = ((wt1 + (- wt3)) * fh);
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = ((wt3 + (- wt5)) * fh);
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = ((wt5 + (- wt7)) * fh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * res * pt3)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = ((w0 + (- w1)) * fh);
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = ((w1 + (- w3)) * fh);
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = ((w3 + (- w5)) * fh);
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = ((w5 + (- w7)) * fh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   _ctx.p2 = (_ctx.p2 + ((dp2 + dpt2) * 0.5f));
   _ctx.p3 = (_ctx.p3 + ((dp3 + dpt3) * 0.5f));
   _tuple___real_real__ _tuple_441;
   {
      _tuple_441.field_0 = _ctx.p1;
      _tuple_441.field_1 = _ctx.p3;
   }
   _output_ = _tuple_441;
   return ;
}

void Lateralus__ctx_type_9_init(Lateralus__ctx_type_9 &_output_){
   Lateralus__ctx_type_9 _ctx;
   Lateralus__ctx_type_8_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_26_init(_ctx._inst431);
   Util__ctx_type_27_init(_ctx._inst429);
   Util__ctx_type_3_init(_ctx._inst424);
   Util__ctx_type_3_init(_ctx._inst423);
   _output_ = _ctx;
   return ;
}

void Lateralus_process_heun_init(Lateralus__ctx_type_9 &_output_){
   Lateralus__ctx_type_9_init(_output_);
   return ;
}

void Lateralus_process_heun(Lateralus__ctx_type_9 &_ctx, float input, float cut, float res, _tuple___real_real__ &_output_){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_443;
   _cond_443 = (Util_change(_ctx._inst423,cut) || Util_change(_ctx._inst424,fs));
   if(_cond_443){
      _ctx.fh = Lateralus_getTune(cut,fs);
   }
   float db12;
   float db24;
   db12 = 0.f;
   db24 = 0.f;
   uint8_t _cond_462;
   _cond_462 = ((fs == 176400.f) || (fs == 192000.f));
   if(_cond_462){
      _tuple___real_real__ _call_445;
      Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_445);
      db12 = _call_445.field_0;db24 = _call_445.field_1;
   }
   else
   {
      uint8_t _cond_461;
      _cond_461 = ((fs == 88200.f) || (fs == 96000.f));
      if(_cond_461){
         float input1;
         input1 = Util_upsampleOrder1_2x(_ctx._inst429,input);
         _tuple___real_real__ _call_447;
         Lateralus_heun(_ctx.h,input1,_ctx.fh,res,_call_447);
         db12 = _call_447.field_0;db24 = _call_447.field_1;
         _tuple___real_real__ _call_448;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_448);
         db12 = _call_448.field_0;db24 = _call_448.field_1;
      }
      else
      {
         float input3;
         float input2;
         float input1;
         _tuple___real_real_real__ _call_451;
         Util_upsampleOrder1_4x(_ctx._inst431,input,_call_451);
         input3 = _call_451.field_0;input2 = _call_451.field_1;input1 = _call_451.field_2;
         _tuple___real_real__ _call_452;
         Lateralus_heun(_ctx.h,input3,_ctx.fh,res,_call_452);
         db12 = _call_452.field_0;db24 = _call_452.field_1;
         _tuple___real_real__ _call_453;
         Lateralus_heun(_ctx.h,input2,_ctx.fh,res,_call_453);
         db12 = _call_453.field_0;db24 = _call_453.field_1;
         _tuple___real_real__ _call_454;
         Lateralus_heun(_ctx.h,input1,_ctx.fh,res,_call_454);
         db12 = _call_454.field_0;db24 = _call_454.field_1;
         _tuple___real_real__ _call_455;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_455);
         db12 = _call_455.field_0;db24 = _call_455.field_1;
      }
   }
   _tuple___real_real__ _tuple_463;
   {
      _tuple_463.field_0 = (db12 * (1.f + (res * 0.5f)));
      _tuple_463.field_1 = (db24 * (1.f + (res * 1.5f)));
   }
   _output_ = _tuple_463;
   return ;
}

void Lateralus__ctx_type_10_init(Lateralus__ctx_type_10 &_output_){
   Lateralus__ctx_type_10 _ctx;
   Lateralus__ctx_type_9_init(_ctx._inst434);
   Util__ctx_type_18_init(_ctx._inst433);
   _output_ = _ctx;
   return ;
}

void Lateralus_process_init(Lateralus__ctx_type_10 &_output_){
   Lateralus__ctx_type_10_init(_output_);
   return ;
}

void Lateralus_process(Lateralus__ctx_type_10 &_ctx, float input, float cut_in, float res_in, _tuple___real_real__ &_output_){
   float res;
   res = Util_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.f,0.25f);
   float limit;
   uint8_t _cond_466;
   _cond_466 = (comp > 0.f);
   if(_cond_466){ limit = (0.9f + (- comp)); }
   else
   { limit = 0.9f; }
   float cut;
   cut = float_clip(cut_in,0.f,limit);
   float noise;
   noise = (Util_simple_noise(_ctx._inst433) * 0.005f);
   _tuple___real_real__ _call_465;
   Lateralus_process_heun(_ctx._inst434,(input + noise),cut,(res * 1.1f),_call_465);
   _output_ = _call_465;
   return ;
}

float Debriatus_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Debriatus_saturate_c0)[index] + (x * (float_wrap_array(Debriatus_saturate_c1)[index] + (float_wrap_array(Debriatus_saturate_c2)[index] * x))));
}

float Debriatus_factor(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Debriatus_factor_c0)[index] + (cv * (float_wrap_array(Debriatus_factor_c1)[index] + (float_wrap_array(Debriatus_factor_c2)[index] * cv))));
}

float Debriatus_crush(float i, float cv){
   float out;
   out = i;
   uint8_t _cond_541;
   _cond_541 = (cv == 0.f);
   if(_cond_541){
      out = i;
   }
   else
   {
      float b;
      b = Debriatus_factor(cv);
      int x;
      x = float_to_int((i * b));
      out = (int_to_float(x) / b);
   }
   return out;
}

float Debriatus_fold(float signal, float level){
   float sign;
   uint8_t _cond_542;
   _cond_542 = (signal > 0.f);
   if(_cond_542){ sign = 1.f; }
   else
   { sign = -1.f; }
   float amp;
   amp = (fabsf(signal) * ((8.f * level) + 1.f));
   float base;
   base = floorf(amp);
   float delta;
   delta = (amp + (- base));
   float out;
   uint8_t _cond_543;
   _cond_543 = ((float_to_int(base) % 2) != 0);
   if(_cond_543){ out = (1.f + (- delta)); }
   else
   { out = delta; }
   return (sign * out);
}

float Debriatus_process(float input, float fold, float crush, float distort, float saturate){
   float x;
   x = Debriatus_fold(input,fold);
   float y;
   y = Debriatus_crush(x,crush);
   float z;
   z = ((y * (1.f + (-2.f * distort))) + (y * y * y * distort * 8.f) + (- distort));
   float out;
   out = Debriatus_saturate((z * (1.f + (saturate * 8.f))));
   return out;
}

void VultEngine__ctx_type_0_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0 _ctx;
   Rescomb__ctx_type_2_init(_ctx.inst);
   _output_ = _ctx;
   return ;
}

void VultEngine_rescomb_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0_init(_output_);
   return ;
}

float VultEngine_rescomb(VultEngine__ctx_type_0 &_ctx, float in, float cv_in, float tone_in, float res_in){
   float i;
   i = float_clip(in,-10.f,10.f);
   float cv;
   cv = float_clip(cv_in,0.f,1.f);
   float tone;
   tone = float_clip(tone_in,-1.05f,1.05f);
   float res;
   res = float_clip(res_in,-1.1f,1.1f);
   return Rescomb_do(_ctx.inst,i,cv,tone,res);
}

void VultEngine__ctx_type_1_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1 _ctx;
   Stabile__ctx_type_8_init(_ctx._inst546);
   _output_ = _ctx;
   return ;
}

void VultEngine_stabile_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1_init(_output_);
   return ;
}

void VultEngine_stabile(VultEngine__ctx_type_1 &_ctx, float in, float cut_in, float res_in, float semblance_in, _tuple___real_real_real_real__ &_output_){
   float cut;
   cut = float_clip(cut_in,0.f,0.92f);
   float res;
   res = float_clip(res_in,0.f,4.f);
   float semblance;
   semblance = float_clip(semblance_in,0.f,1.f);
   _tuple___real_real_real_real__ _call_556;
   Stabile_process(_ctx._inst546,in,cut,res,semblance,_call_556);
   _output_ = _call_556;
   return ;
}

void VultEngine__ctx_type_2_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2 _ctx;
   Lateralus__ctx_type_10_init(_ctx._inst548);
   _output_ = _ctx;
   return ;
}

void VultEngine_lateralus_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2_init(_output_);
   return ;
}

void VultEngine_lateralus(VultEngine__ctx_type_2 &_ctx, float in, float cut, float res, _tuple___real_real__ &_output_){
   _tuple___real_real__ _call_558;
   Lateralus_process(_ctx._inst548,in,cut,res,_call_558);
   _output_ = _call_558;
   return ;
}

void VultEngine__ctx_type_3_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3 _ctx;
   Tangents__ctx_type_11_init(_ctx._inst550);
   _output_ = _ctx;
   return ;
}

void VultEngine_tangents_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3_init(_output_);
   return ;
}

float VultEngine_tangents(VultEngine__ctx_type_3 &_ctx, float lp, float bp, float hp, float cut, float res){
   return Tangents_process(_ctx._inst550,lp,bp,hp,cut,res);
}

float VultEngine_debriatus(float in, float fold_in, float crush_in, float distort_in, float saturate_in){
   float fold;
   fold = float_clip(fold_in,0.f,1.f);
   float crush;
   crush = float_clip(crush_in,0.f,1.f);
   float distort;
   distort = float_clip(distort_in,0.f,1.f);
   float saturate;
   saturate = float_clip(saturate_in,0.f,1.f);
   return Debriatus_process(in,fold,crush,distort,saturate);
}

void VultEngine__ctx_type_5_init(VultEngine__ctx_type_5 &_output_){
   VultEngine__ctx_type_5 _ctx;
   Trummor__ctx_type_0_init(_ctx.processor);
   _output_ = _ctx;
   return ;
}

void VultEngine_trummor_init(VultEngine__ctx_type_5 &_output_){
   VultEngine__ctx_type_5_init(_output_);
   return ;
}

void VultEngine_trummor(VultEngine__ctx_type_5 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   _tuple___real_real_real_real__ _call_560;
   Trummor_do(_ctx.processor,gate,osc_in,noise_in,_call_560);
   _output_ = _call_560;
   return ;
}

void VultEngine__ctx_type_6_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6 _ctx;
   Trummor2__ctx_type_3_init(_ctx.processor);
   _output_ = _ctx;
   return ;
}

void VultEngine_trummor2_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6_init(_output_);
   return ;
}

void VultEngine_trummor2(VultEngine__ctx_type_6 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   _tuple___real_real_real_real__ _call_562;
   Trummor2_do(_ctx.processor,gate,osc_in,noise_in,_call_562);
   _output_ = _call_562;
   return ;
}

void VultEngine__ctx_type_7_init(VultEngine__ctx_type_7 &_output_){
   VultEngine__ctx_type_7 _ctx;
   Tohe__ctx_type_2_init(_ctx._inst555);
   _output_ = _ctx;
   return ;
}

void VultEngine_tohe_init(VultEngine__ctx_type_7 &_output_){
   VultEngine__ctx_type_7_init(_output_);
   return ;
}

float VultEngine_tohe(VultEngine__ctx_type_7 &_ctx, float x, float tone_in){
   float tone;
   tone = float_clip(tone_in,-1.f,1.f);
   return Tohe_do(_ctx._inst555,x,tone);
}


