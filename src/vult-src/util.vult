/*
Copyright (c) 2017 Leonardo Laguna Ruiz (modlfo@gmail.com), All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1.- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2.- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3.- Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
4.- Commercial use requires explicit permission of the author.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

external getSampleRate() : real "getSampleRate";

fun sampleRateScale() {
   return 44100.0 / Util.getSampleRate();
}

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun cubic_clipper(x) {
   if(x <= -2.0/3.0)
      return -1.0;
   else if(x >= 2.0/3.0)
      return 1.0;
   else
      return 3.0 / 2.0 * 27.0/23.0 * (x - (x * x * x) / 3.0);
}

fun stanh(x) @[table(min = -24.0, max = 24.0, size = 241)] {
  return 16.0 * tanh(x / 16.0);
}

fun sine(x) @[table(min = 0.0, max = 1.0, size = 101)] {
  return sin(x * 2.0 * pi());
}

fun saturate(x) @[table(min = -24.0, max = 24.0, size = 241)] {
  return tanh(x);
}

fun map(x:real,x0,x1,y0,y1) : real {
  return (x-x0)*(y1-y0)/(x1-x0) + y0;
}

fun dcblock(x0){
  mem x1,y1;
  val y0 = x0-x1+y1*0.995;
  x1,y1 = x0,y0;
  return y0;
}

fun smooth(input){
   mem x;
   x = x+(input-x)*0.005;
   return x;
}

fun cvToPitch(cv) {
   return cv * 120.0 + 24.0;
}

fun cvToperiodUnit(cv) @[table(size=128,min=-1.0,max=1.0)] {
   val pitch = cvToPitch(cv);
   val f = 8.175798915643707 * exp(0.057762265046662105 * pitch); //440. 2^((pitch - 69)/12.)
   return 1.0 / f / 2.0;
}

/* Returns the frequency in kHz of the corresponding CV */
fun cvTokHz(cv) @[table(size=32,min=0.0,max=1.0)] {
   val pitch = Util.cvToPitch(cv);
   val f = 8.175798915643707 * exp(0.057762265046662105 * pitch); //440. 2^((pitch - 69)/12.)
   return f/1000.0;
}

fun pitchToRateUnit(pitch) @[table(size=32, min=0.0, max=127.0)] {
   return 8.175798915643707 * exp(0.057762265046662105 * pitch);
}

fun cvToRateUnit(cv) @[table(size=128, min=0.0, max=0.9)] {
   return pitchToRateUnit(cvToPitch(cv));
}

fun pitchToRate(pitch) {
   mem rate;
   val fs = getSampleRate();
   if(change(pitch) || change(fs))
      rate = pitchToRateUnit(pitch) / getSampleRate();
   return rate;
}

fun cvToRate(cv) {
   mem rate;
   val fs = getSampleRate();
   if(change(cv) || change(fs))
       rate = cvToRateUnit(cv) / fs;
   return rate;
}

fun cvToHarmonics(cv) @[table(size=32,min=0.0,max=1.0)] {
   val f = cvTokHz(cv);
   return 22.0/f;
}

fun simple_noise() {
   mem x1 = (x1 * 17389 + 7919) % 32768;
   val y1 = real(x1) / 32768.0;
   return y1;
}

fun polylog(x){
   val xx = clip(x, 0.0, 1.0);
   return (2.0 - xx) * xx;
}

fun shaper(x){
   val pos, sign = if x >= 0.0 then x, 1.0 else -x, -1.0;
   val y = if pos < 1.0 then (2.0 - pos) * pos else 1.0;
   return y * sign;
}

fun fadeA(x) @[table(size=32, min=0.0, max=1.0)]{
   return cos(2.0 * pi() * x / 4.0);
}

fun fadeB(x) @[table(size=32, min=0.0, max=1.0)]{
   return sin(2.0 * pi() * x / 4.0);
}

fun fade(x) {
   return fadeA(x), fadeB(x);
}

fun upsampleOrder2_4x(y0) {
   mem y2, y1;
   val p2 = 5.0 / 32.0  * y0 + 15.0 / 16.0 * y1 - 3.0 / 32.0 * y2;
   val p1 = 3.0 / 8.0   * y0 + 3.0 / 4.0   * y1 - 1.0 / 8.0  * y2;
   val p0 = 21.0 / 32.0 * y0 + 7.0 / 16.0  * y1 - 3.0 / 32.0 * y2;
   y2, y1 = y1, y0;
   return p2, p1, p0;
}

fun upsampleOrder2_2x(y0) {
   mem y2, y1;
   val p0 = 3.0 / 8.0 * y0 + 3.0 / 4.0 * y1 - 1.0 / 8.0 * y2;
   y2, y1 = y1, y0;
   return p0;
}

fun upsampleOrder1_4x(y0) {
   mem y1;
   val p2 = (y0 + 3.0 * y1) / 4.0;
   val p1 = (y0 + y1) / 2.0;
   val p0 = (3.0 * y0 + y1) / 4.0;
   y1 = y0;
   return p2, p1, p0;
}

fun upsampleOrder1_2x(y0) {
   mem y1;
   val p0 = (y0 + y1) / 2.0;
   y1 = y0;
   return p0;
}

fun cheby3(x){
   return 4.0 * x * x * x - 3.0 * x;
}

fun decimate_4x_do(x) {
   mem z[32];
   mem index;
   val coeff = [-0.014181168921320608, -0.0197443826146085, -0.0234695564557468,
      -0.024608797996973464, -0.022588261469944942,
      -0.017077175577835977, -0.008036409534633047,
      0.004259137852277821, 0.019227535788169766, 0.036016514919162725,
      0.05356716799905897, 0.07069918749357969, 0.08620989876256072,
      0.09897783134562362, 0.10806097685931121, 0.11278028150737965,
      0.11278028150737965, 0.10806097685931121, 0.09897783134562362,
      0.08620989876256072, 0.07069918749357969, 0.05356716799905897,
      0.036016514919162725, 0.019227535788169766, 0.004259137852277821,
      -0.008036409534633047, -0.017077175577835977,
      -0.022588261469944942, -0.024608797996973464, -0.0234695564557468,
      -0.0197443826146085, -0.014181168921320608];
   z[index] = x;
   val count, i, out = 0, index, 0.0;
   while(count < size(coeff)) {
      out = out + z[i] * coeff[count];
      count = count + 1;
      i = if i == 0 then size(z) - 1 else i - 1;
   }
   index = (index + 1) % size(z);
   return out;
}
and decimate_4x_skip(x){
   z[index] = x;
   index = (index + 1) % size(z);
}

fun decimate_2x_do(x) {
   mem z[32];
   mem index;
   val coeff = [-0.02051410965839171, -0.017260149834272022,
      -0.004507235655183924, 0.01265376378787532, 0.026109537916175287,
      0.028219649236420487, 0.015603662006964704, -0.0084630025824956,
      -0.03428235542706631, -0.048806510519611435,
      -0.040557438346820844, -0.004532040984406897, 0.05491340375084958,
      0.12452273078110253, 0.18600173254821054, 0.22199286940654303,
      0.22199286940654303, 0.18600173254821054, 0.12452273078110253,
      0.05491340375084958, -0.004532040984406897, -0.040557438346820844,
      -0.048806510519611435, -0.03428235542706631, -0.0084630025824956,
      0.015603662006964704, 0.028219649236420487, 0.026109537916175287,
      0.01265376378787532, -0.004507235655183924, -0.017260149834272022,
      -0.02051410965839171];
   z[index] = x;
   val count, i, out = 0, index, 0.0;
   while(count < size(coeff)) {
      out = out + z[i] * coeff[count];
      count = count + 1;
      i = if i == 0 then size(z) - 1 else i - 1;
   }
   index = (index + 1) % size(z);
   return out;
}
and decimate_2x_skip(x){
   z[index] = x;
   index = (index + 1) % size(z);
}

