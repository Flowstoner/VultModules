/*
Copyright (c) 2017 Leonardo Laguna Ruiz (modlfo@gmail.com), All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1.- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2.- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3.- Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
4.- Commercial use requires explicit permission of the author.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

fun shape(x, shaper, sub) {
   val out = 0.0;
   if(shaper < 0.0) {
      val comp = Util.map(sub, 0.0, 1.0, 1.0, 0.7);
      val xx = comp * x;
      out = Util.shaper(xx * Util.fadeA(-shaper) + Util.cheby3(xx) * Util.fadeB(-shaper));
   }
   else
      out = Util.shaper((shaper + 1.0) * x);
   return out;
}

fun filterS(x, cutoff, resonance, filter_type) {
   val out;
   val low, band, high,_ = Stabile.process(x, clip(cutoff, 0.0, 0.92), 40.0 * resonance, 0.0);
   out = if filter_type < 1.0 then low else if filter_type < 2.0 then band else high;
   return out;
}

fun filterP(x, cutoff, resonance, filter_type) {
   val lp_on = filter_type < 1.0;
   val bp_on = filter_type < 2.0 && filter_type >= 1.0;
   val hp_on = filter_type < 3.0 && filter_type >= 2.0;
   val lp, bp, hp = if lp_on then x, 0.0, 0.0 else if bp_on then 0.0, x, 0.0 else 0.0, 0.0, x;
   return Tangents.process(lp, bp, hp, cutoff, 0.6 * Util.polylog(resonance), lp_on, bp_on, hp_on);
}

fun env(gate, sep_gate, env_mode, env_a, env_h, env_r, env_enabled) {
   val env_fast = env_mode > 0.5;
   val env_loop = env_mode > 1.5;
   val env_ar_scale = if env_fast && env_loop then 0.05 else if env_fast then 0.2 else 1.0;
   val env_ah_scale =  if env_fast then 0.2 else 1.0;
   val env_aa = env_a * env_a;
   val env_hh = env_h * env_h;
   val env_rr = env_r * env_r;
   val out_env, env_reset =
      if env_loop then
         Ahr.loop(gate || sep_gate, env_ar_scale * env_aa, env_ah_scale * env_hh, env_rr)
      else
         Ahr.do(gate || sep_gate, env_ar_scale * env_aa, env_ah_scale * env_hh, env_ar_scale * env_rr, env_enabled, env_loop);
   out_env = if env_fast then Util.polylog(out_env) else out_env;
   return out_env, env_reset;
}

fun do(main_gate, osc_in, noise_in, osc_gate, noise_gate) {
   mem level1, level2;
   mem env1_a, env1_h, env1_r, env1_mode;
   mem env2_a, env2_h, env2_r, env2_mode;
   mem pitch, bend, shaper;
   mem noise_tune, tone, rescomb;
   mem int_osc, ext_osc;
   mem int_noise, ext_noise;
   mem ring_sel;
   mem bend_time;
   mem sub;
   mem env_enabled;
   mem cutoff, resonance, filter;
   mem wave;

   val gate = main_gate >= 0.2;
   val ogate = osc_gate >= 0.2;
   val ngate = noise_gate >= 0.2;

   // -- Oscillator envelope
   val osc_env, env_reset = env(gate, ogate, env1_mode, env1_a, env1_h, env1_r, env_enabled);

   // -- Change of pitch
   val swept = Swept.process((gate || ogate) && env_enabled, bend * 0.6, 0.0, bend_time);
   val cv = pitch + swept;

   // -- Oscillators
   val sub_osc, reset_sub = Tricore.process(cv - 0.1, 0.0, env_reset, wave);
   val osc, reset_osc = Tricore.process(cv, 0.0, env_reset, wave);
   // sub mix
   val osc_level, sub_level = Util.fade(sub / 2.0);
   osc = sub_level * sub_osc + osc * osc_level;
   // ext mix
   osc = int_osc * osc + ext_osc * osc_in;
   // shaper
   osc = shape(0.7 * osc, shaper, sub);

   env_enabled = not(reset_sub) && not(reset_osc);

   // -- Noise Envenlope
   val noise_env, _ = env(gate, ngate, env2_mode, env2_a, env2_h, env2_r, env_enabled || not(gate));

   // -- Noise mix
   val noise_osc = (random() - 0.5) * int_noise + ext_noise * noise_in;
   noise_osc = Tohe.do(noise_osc, tone);

   // -- Filter
   val filter_output = filterP(noise_osc * noise_env, cutoff, resonance, filter);
   val comb = clip((3.0 * rescomb) * (3.0 * rescomb), -1.0, 1.0);
   comb = if rescomb < 0.0 then -comb else comb;
   filter_output = Rescomb.do(filter_output, noise_tune, comb, abs(rescomb));
   // -- Final mix
   val osc_output = level1 * osc_env * osc;
   val noise_output = 0.5 * level2 * filter_output;
   val output = osc_output + noise_output;
   return output, cv, osc_env, noise_env, osc_output, noise_output;
}
and setLevel1(value) {
   level1 = clip(value, 0.0, 1.0);
}
and setLevel2(value) {
   level2 = clip(value, 0.0, 1.0);
}
and setEnv1A(value) {
   env1_a = clip(value, 0.0, 1.0);
}
and setEnv1H(value) {
   env1_h = clip(value, 0.0, 1.0);
}
and setEnv1R(value) {
   env1_r = clip(value, 0.0, 1.0);
}
and setEnv2A(value) {
   env2_a = clip(value, 0.0, 1.0);
}
and setEnv2H(value) {
   env2_h = clip(value, 0.0, 1.0);
}
and setEnv2R(value) {
   env2_r = clip(value, 0.0, 1.0);
}
and setPitch(value) {
   pitch = clip(value, -1.0, 1.0);
}
and setBend(value) {
   bend = clip(value, -1.0, 1.0);
}
and setShaper(value) {
   shaper = clip(value, -1.0, 1.0);
}
and setWave(value) {
   wave = clip(value, -1.0, 1.0);
}
and setNoiseTune(value) {
   noise_tune = clip(value, -0.1, 0.9);
}
and setRescomb(value) {
   rescomb = clip(value, -1.0, 1.0);
}
and setTone(value) {
   tone = clip(value, -1.0, 1.0);
}
and setOscBlend(value) {
   val mix = clip(value, 0.0, 1.0);
   int_osc, ext_osc = Util.fade(mix);
}
and setNoiseBlend(value) {
   val mix = clip(value, 0.0, 1.0);
   int_noise, ext_noise = Util.fade(mix);
}
and setEnv1Scale(value) {
   env1_mode = value;
}
and setEnv2Scale(value) {
   env2_mode = value;
}
and setRingSel(value) {
   ring_sel = value > 0.5;
}
and setBendTime(value) {
   bend_time = value;
}
and setSub(value) {
   sub = clip(value, 0.0, 1.0);
}
and setCutoff(value) {
   cutoff = clip(value, 0.0, 0.92);
}
and setResonance(value) {
   resonance = clip(value, 0.0, 1.0);
}
and setFilter(value) {
   filter = clip(value, 0.0, 2.0);
}
