/*
Copyright (c) 2017 Leonardo Laguna Ruiz (modlfo@gmail.com), All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1.- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2.- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3.- Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
4.- Commercial use requires explicit permission of the author.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

fun do(gate, osc_in, noise_in) {
   mem level1, level2;
   mem env1_a, env1_h, env1_r;
   mem env2_a, env2_h, env2_r;
   mem pitch, bend, drive;
   mem tone, decimate;
   mem int_osc, ext_osc;
   mem int_noise, ext_noise;
   mem env1_scale, env2_scale;
   mem ring_sel;
   mem bend_time;
   mem sub;
   mem cheby;
   mem env_enabled;
   mem cutoff, resonance;
   // Envelope of the drum. One parameter affects the hold and relase
   val osc_env, env_reset = Ahr.do(gate, env1_scale * env1_a, env1_scale * env1_h, env1_scale * env1_r, env_enabled);
   // Change of pitch
   val swept = Swept.process(1.0 - env_reset, bend * 0.6, 0.0, bend_time);
   val cv = pitch + swept;
   // Note: the oscillator is dissabled while the nevelop resets
   val sub_osc, reset_sub = Tricore.process(cv - 0.1, 0.0, env_reset);
   val osc, reset_osc = Tricore.process(cv, 0.0, env_reset);
   env_enabled = not(reset_sub) && not(reset_osc);

   osc = sub * sub_osc + osc;
   osc = int_osc * osc + ext_osc * osc_in;
   // Saturates the triangle to get a sine with some harmonics
   osc = osc + cheby * Util.cheby3(osc);
   osc = Util.saturate((drive + 1.0) * osc);

   val noise_env, _ = Ahr.do(gate, env2_scale * env2_a, env2_scale * env2_h, env2_scale * env2_r, env_enabled);
   val noise_osc =
      if decimate == 0.0 then
         (if ring_sel then
            5.0 * (random() - 0.5) * noise_in
         else
            int_noise * (random() - 0.5) + ext_noise * noise_in)
      else
         (if ring_sel then
            5.0 * Decimate.decimate(Noise.process(gate), decimate) * noise_in
         else
            Decimate.decimate(int_noise * Noise.process(gate) + ext_noise * noise_in, decimate));
   noise_osc = Tohe2.do(noise_osc, tone);

   val filter_input = noise_env * noise_osc;
   val filter_output,_,_,_ = Stabile.process(filter_input, cutoff, 4.0 * resonance, 0.5);
   val output = level1 * osc_env * osc + level2 * filter_output;
   return output, cv, osc_env, noise_env;
}
and setLevel1(value) {
   level1 = clip(value, 0.0, 1.0);
}
and setLevel2(value) {
   level2 = clip(value, 0.0, 1.0);
}
and setEnv1A(value) {
   env1_a = clip(value, 0.0, 1.0);
}
and setEnv1H(value) {
   env1_h = clip(value, 0.0, 1.0);
}
and setEnv1R(value) {
   env1_r = clip(value, 0.0, 1.0);
}
and setEnv2A(value) {
   env2_a = clip(value, 0.0, 1.0);
}
and setEnv2H(value) {
   env2_h = clip(value, 0.0, 1.0);
}
and setEnv2R(value) {
   env2_r = clip(value, 0.0, 1.0);
}
and setPitch(value) {
   pitch = clip(value, -1.0, 1.0);
}
and setBend(value) {
   bend = clip(value, -1.0, 1.0);
}
and setDrive(value) {
   drive = clip(value, 0.0, 1.0);
}
and setTone(value) {
   tone = clip(value, -1.0, 1.0);
}
and setOscBlend(value) {
   int_osc = Util.fadeA(value);
   ext_osc = Util.fadeB(value);
}
and setNoiseBlend(value) {
   int_noise = Util.fadeA(value);
   ext_noise = Util.fadeB(value);
}
and setEnv1Scale(value) {
   env1_scale = if value < 0.5 then 1.0 else 0.2;
}
and setEnv2Scale(value) {
   env2_scale = if value < 0.5 then 1.0 else 0.2;
}
and setDecimate(value) {
   decimate = clip(value, 0.0, 1.0);
}
and setRingSel(value) {
   ring_sel = value > 0.5;
}
and setBendTime(value) {
   bend_time = value;
}
and setSub(value) {
   sub = value;
}
and setCheby(value) {
   cheby = value;
}
and setCutoff(value) {
   cutoff = value;
}
and setResonance(value) {
   resonance = value;
}
