/*
Copyright (c) 2017 Leonardo Laguna Ruiz (modlfo@gmail.com), All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1.- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2.- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3.- Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
4.- Commercial use requires explicit permission of the author.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

fun tune(cut, fs, oversampling) {
   val f = Util.cvTokHz(cut);
   val fh = tan((2.0 * pi()) * f / (oversampling * fs));
   return fh;
}

fun tune_44100(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 44.1, 4.0);
}

fun tune_48000(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 48.0, 4.0);
}

fun tune_88200(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 88.2, 2.0);
}

fun tune_96000(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 96.0, 2.0);
}

fun tune_176400(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 176.4, 1.0);
}

fun tune_192000(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 192.0, 1.0);
}

fun getTune(cut, fs) {
   if (fs == 44100.0)
      return tune_44100(cut);
   else if (fs == 48000.0)
      return tune_48000(cut);
   else if (fs == 88200.0)
      return tune_88200(cut);
   else if (fs == 96000.0)
      return tune_96000(cut);
   else if (fs == 176400.0)
      return tune_176400(cut);
   else if (fs == 192000.0)
      return tune_192000(cut);
   else
      return tune(cut, fs, 4.0);
}

fun heun(input, fh, res) {
   mem p0, p1, p2, p3;

   val wt0 = Util.cubic_clipper(input - 4.0 * res * p3);
   val wt1 = Util.cubic_clipper(p0);
   val dpt0 = (wt0 - wt1) * fh;
   val wt3 = Util.cubic_clipper(p1);
   val dpt1 = (wt1 - wt3) * fh;
   val wt5 = Util.cubic_clipper(p2);
   val dpt2 = (wt3 - wt5) * fh;
   val wt7 = Util.cubic_clipper(p3);
   val dpt3 = (wt5 - wt7) * fh;

   val pt0 = p0 + dpt0;
   val pt1 = p1 + dpt1;
   val pt2 = p2 + dpt2;
   val pt3 = p3 + dpt3;

   val w0 = Util.cubic_clipper(input - 4.0 * res * pt3);
   val w1 = Util.cubic_clipper(pt0);
   val dp0 = (w0 - w1) * fh;
   val w3 = Util.cubic_clipper(pt1);
   val dp1 = (w1 - w3) * fh;
   val w5 = Util.cubic_clipper(pt2);
   val dp2 = (w3 - w5) * fh;
   val w7 = Util.cubic_clipper(pt3);
   val dp3 = (w5 - w7) * fh;

   p0 = p0 + (dp0 + dpt0)/ 2.0;
   p1 = p1 + (dp1 + dpt1)/ 2.0;
   p2 = p2 + (dp2 + dpt2)/ 2.0;
   p3 = p3 + (dp3 + dpt3)/ 2.0;

   return p0, p1, p2, p3;
}

fun process_heun(input:real, cut:real, res:real) {
   mem fh;
   val fs = Util.getSampleRate();
   if(Util.change(cut) || Util.change(fs)) {
      fh = getTune(cut, fs);
   }
   val db6, db12, db18, db24 = 0.0, 0.0, 0.0, 0.0;

   if(fs == 176400.0 || fs == 192000.0) {
      db6, db12, db18, db24 = h:heun(input, fh, res);
   }
   else if (fs == 88200.0 || fs == 96000.0) {
      val input1 = Util.upsampleOrder1_2x(input);
      val db6_1, db12_1, db18_1, db24_1 = h:heun(input1, fh, res);
      val db6_0, db12_0, db18_0, db24_0 = h:heun(input, fh, res);
      _ = d6_2:Util.decimate_2x_skip(db6_1);
      db6 = d6_2:Util.decimate_2x_do(db6_0);
      _ = d12_2:Util.decimate_2x_skip(db12_1);
      db12 = d12_2:Util.decimate_2x_do(db12_0);
      _ = d18_2:Util.decimate_2x_skip(db18_1);
      db18 = d18_2:Util.decimate_2x_do(db18_0);
      _ = d24_2:Util.decimate_2x_skip(db24_1);
      db24 = d24_2:Util.decimate_2x_do(db24_0);
   }
   else {
      val input3, input2, input1 = Util.upsampleOrder1_4x(input);
      val db6_3, db12_3, db18_3, db24_3 = h:heun(input3, fh, res);
      val db6_2, db12_2, db18_2, db24_2 = h:heun(input2, fh, res);
      val db6_1, db12_1, db18_1, db24_1 = h:heun(input1, fh, res);
      val db6_0, db12_0, db18_0, db24_0 = h:heun(input, fh, res);
      _ = d6:Util.decimate_4x_skip(db6_3);
      _ = d6:Util.decimate_4x_skip(db6_2);
      _ = d6:Util.decimate_4x_skip(db6_1);
      db6 = d6:Util.decimate_4x_do(db6_0);

      _ = d12:Util.decimate_4x_skip(db12_3);
      _ = d12:Util.decimate_4x_skip(db12_2);
      _ = d12:Util.decimate_4x_skip(db12_1);
      db12 = d12:Util.decimate_4x_do(db12_0);

      _ = d18:Util.decimate_4x_skip(db18_3);
      _ = d18:Util.decimate_4x_skip(db18_2);
      _ = d18:Util.decimate_4x_skip(db18_1);
      db18 = d18:Util.decimate_4x_do(db18_0);

      _ = d24:Util.decimate_4x_skip(db24_3);
      _ = d24:Util.decimate_4x_skip(db24_2);
      _ = d24:Util.decimate_4x_skip(db24_1);
      db24 = d24:Util.decimate_4x_do(db24_0);
   }
   return db6, db12 * (1.0 + res * 0.5), db18 * (1.0 + res), db24 * (1.0 + res * 1.5);
}


fun process(input:real, cut_in:real, res_in:real) {
   val res = Util.polylog(res_in);
   val comp = Util.map(res, 0.9, 1.0, 0.0, 0.15);
   val limit = if comp > 0.0 then 0.9 - comp else 0.9;
   val cut = clip(cut_in, 0.0, limit);
   val noise = Util.simple_noise() * 0.005;
   return process_heun(input + noise, cut, res * 1.1);
}
